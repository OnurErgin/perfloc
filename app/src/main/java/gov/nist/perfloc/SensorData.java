// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_data.proto

package gov.nist.perfloc;

public final class SensorData {
  private SensorData() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface SensorReadingOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int64 sequence_nr = 1;
    /**
     * <code>optional int64 sequence_nr = 1;</code>
     *
     * <pre>
     * Sequence number of a reading
     * </pre>
     */
    boolean hasSequenceNr();
    /**
     * <code>optional int64 sequence_nr = 1;</code>
     *
     * <pre>
     * Sequence number of a reading
     * </pre>
     */
    long getSequenceNr();

    // optional int64 timestamp = 2;
    /**
     * <code>optional int64 timestamp = 2;</code>
     *
     * <pre>
     * Time of this scan in milliseconds
     * </pre>
     */
    boolean hasTimestamp();
    /**
     * <code>optional int64 timestamp = 2;</code>
     *
     * <pre>
     * Time of this scan in milliseconds
     * </pre>
     */
    long getTimestamp();

    // optional int32 last_dot_nr = 3;
    /**
     * <code>optional int32 last_dot_nr = 3;</code>
     *
     * <pre>
     * Location where the measurment was taken
     * </pre>
     */
    boolean hasLastDotNr();
    /**
     * <code>optional int32 last_dot_nr = 3;</code>
     *
     * <pre>
     * Location where the measurment was taken
     * </pre>
     */
    int getLastDotNr();

    // optional .perfloc.SensorReading.SensorEvent sensor_event = 4;
    /**
     * <code>optional .perfloc.SensorReading.SensorEvent sensor_event = 4;</code>
     *
     * <pre>
     * Format defining a sensor reading
     * </pre>
     */
    boolean hasSensorEvent();
    /**
     * <code>optional .perfloc.SensorReading.SensorEvent sensor_event = 4;</code>
     *
     * <pre>
     * Format defining a sensor reading
     * </pre>
     */
    gov.nist.perfloc.SensorData.SensorReading.SensorEvent getSensorEvent();
    /**
     * <code>optional .perfloc.SensorReading.SensorEvent sensor_event = 4;</code>
     *
     * <pre>
     * Format defining a sensor reading
     * </pre>
     */
    gov.nist.perfloc.SensorData.SensorReading.SensorEventOrBuilder getSensorEventOrBuilder();
  }
  /**
   * Protobuf type {@code perfloc.SensorReading}
   */
  public static final class SensorReading extends
      com.google.protobuf.GeneratedMessage
      implements SensorReadingOrBuilder {
    // Use SensorReading.newBuilder() to construct.
    private SensorReading(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SensorReading(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SensorReading defaultInstance;
    public static SensorReading getDefaultInstance() {
      return defaultInstance;
    }

    public SensorReading getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SensorReading(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              sequenceNr_ = input.readInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              timestamp_ = input.readInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              lastDotNr_ = input.readInt32();
              break;
            }
            case 34: {
              gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = sensorEvent_.toBuilder();
              }
              sensorEvent_ = input.readMessage(gov.nist.perfloc.SensorData.SensorReading.SensorEvent.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(sensorEvent_);
                sensorEvent_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gov.nist.perfloc.SensorData.internal_static_perfloc_SensorReading_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gov.nist.perfloc.SensorData.internal_static_perfloc_SensorReading_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gov.nist.perfloc.SensorData.SensorReading.class, gov.nist.perfloc.SensorData.SensorReading.Builder.class);
    }

    public static com.google.protobuf.Parser<SensorReading> PARSER =
        new com.google.protobuf.AbstractParser<SensorReading>() {
      public SensorReading parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SensorReading(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SensorReading> getParserForType() {
      return PARSER;
    }

    public interface SensorEventOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // optional int32 sensor_type = 1;
      /**
       * <code>optional int32 sensor_type = 1;</code>
       *
       * <pre>
       * Type of the sensor
       * </pre>
       */
      boolean hasSensorType();
      /**
       * <code>optional int32 sensor_type = 1;</code>
       *
       * <pre>
       * Type of the sensor
       * </pre>
       */
      int getSensorType();

      // optional int64 timestamp = 2;
      /**
       * <code>optional int64 timestamp = 2;</code>
       *
       * <pre>
       * timestamp in nanosecond at which the event happened
       * </pre>
       */
      boolean hasTimestamp();
      /**
       * <code>optional int64 timestamp = 2;</code>
       *
       * <pre>
       * timestamp in nanosecond at which the event happened
       * </pre>
       */
      long getTimestamp();

      // optional int32 accuracy = 3;
      /**
       * <code>optional int32 accuracy = 3;</code>
       */
      boolean hasAccuracy();
      /**
       * <code>optional int32 accuracy = 3;</code>
       */
      int getAccuracy();

      // optional .perfloc.SensorReading.SensorEvent.SensorValues values = 4;
      /**
       * <code>optional .perfloc.SensorReading.SensorEvent.SensorValues values = 4;</code>
       *
       * <pre>
       * Content of array values of a sensor event
       * </pre>
       */
      boolean hasValues();
      /**
       * <code>optional .perfloc.SensorReading.SensorEvent.SensorValues values = 4;</code>
       *
       * <pre>
       * Content of array values of a sensor event
       * </pre>
       */
      gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues getValues();
      /**
       * <code>optional .perfloc.SensorReading.SensorEvent.SensorValues values = 4;</code>
       *
       * <pre>
       * Content of array values of a sensor event
       * </pre>
       */
      gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValuesOrBuilder getValuesOrBuilder();
    }
    /**
     * Protobuf type {@code perfloc.SensorReading.SensorEvent}
     */
    public static final class SensorEvent extends
        com.google.protobuf.GeneratedMessage
        implements SensorEventOrBuilder {
      // Use SensorEvent.newBuilder() to construct.
      private SensorEvent(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private SensorEvent(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final SensorEvent defaultInstance;
      public static SensorEvent getDefaultInstance() {
        return defaultInstance;
      }

      public SensorEvent getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private SensorEvent(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                sensorType_ = input.readInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                timestamp_ = input.readInt64();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                accuracy_ = input.readInt32();
                break;
              }
              case 34: {
                gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues.Builder subBuilder = null;
                if (((bitField0_ & 0x00000008) == 0x00000008)) {
                  subBuilder = values_.toBuilder();
                }
                values_ = input.readMessage(gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(values_);
                  values_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000008;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gov.nist.perfloc.SensorData.internal_static_perfloc_SensorReading_SensorEvent_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gov.nist.perfloc.SensorData.internal_static_perfloc_SensorReading_SensorEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gov.nist.perfloc.SensorData.SensorReading.SensorEvent.class, gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Builder.class);
      }

      public static com.google.protobuf.Parser<SensorEvent> PARSER =
          new com.google.protobuf.AbstractParser<SensorEvent>() {
        public SensorEvent parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new SensorEvent(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<SensorEvent> getParserForType() {
        return PARSER;
      }

      public interface SensorValuesOrBuilder
          extends com.google.protobuf.MessageOrBuilder {

        // repeated float value = 1 [packed = true];
        /**
         * <code>repeated float value = 1 [packed = true];</code>
         *
         * <pre>
         * Values a sensor produces. For event based sensors it is always 1, such as 
         * </pre>
         */
        java.util.List<java.lang.Float> getValueList();
        /**
         * <code>repeated float value = 1 [packed = true];</code>
         *
         * <pre>
         * Values a sensor produces. For event based sensors it is always 1, such as 
         * </pre>
         */
        int getValueCount();
        /**
         * <code>repeated float value = 1 [packed = true];</code>
         *
         * <pre>
         * Values a sensor produces. For event based sensors it is always 1, such as 
         * </pre>
         */
        float getValue(int index);
      }
      /**
       * Protobuf type {@code perfloc.SensorReading.SensorEvent.SensorValues}
       */
      public static final class SensorValues extends
          com.google.protobuf.GeneratedMessage
          implements SensorValuesOrBuilder {
        // Use SensorValues.newBuilder() to construct.
        private SensorValues(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
          super(builder);
          this.unknownFields = builder.getUnknownFields();
        }
        private SensorValues(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

        private static final SensorValues defaultInstance;
        public static SensorValues getDefaultInstance() {
          return defaultInstance;
        }

        public SensorValues getDefaultInstanceForType() {
          return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;
        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
            getUnknownFields() {
          return this.unknownFields;
        }
        private SensorValues(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          initFields();
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(input, unknownFields,
                                         extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 13: {
                  if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                    value_ = new java.util.ArrayList<java.lang.Float>();
                    mutable_bitField0_ |= 0x00000001;
                  }
                  value_.add(input.readFloat());
                  break;
                }
                case 10: {
                  int length = input.readRawVarint32();
                  int limit = input.pushLimit(length);
                  if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                    value_ = new java.util.ArrayList<java.lang.Float>();
                    mutable_bitField0_ |= 0x00000001;
                  }
                  while (input.getBytesUntilLimit() > 0) {
                    value_.add(input.readFloat());
                  }
                  input.popLimit(limit);
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this);
          } finally {
            if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              value_ = java.util.Collections.unmodifiableList(value_);
            }
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return gov.nist.perfloc.SensorData.internal_static_perfloc_SensorReading_SensorEvent_SensorValues_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return gov.nist.perfloc.SensorData.internal_static_perfloc_SensorReading_SensorEvent_SensorValues_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues.class, gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues.Builder.class);
        }

        public static com.google.protobuf.Parser<SensorValues> PARSER =
            new com.google.protobuf.AbstractParser<SensorValues>() {
          public SensorValues parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new SensorValues(input, extensionRegistry);
          }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<SensorValues> getParserForType() {
          return PARSER;
        }

        // repeated float value = 1 [packed = true];
        public static final int VALUE_FIELD_NUMBER = 1;
        private java.util.List<java.lang.Float> value_;
        /**
         * <code>repeated float value = 1 [packed = true];</code>
         *
         * <pre>
         * Values a sensor produces. For event based sensors it is always 1, such as 
         * </pre>
         */
        public java.util.List<java.lang.Float>
            getValueList() {
          return value_;
        }
        /**
         * <code>repeated float value = 1 [packed = true];</code>
         *
         * <pre>
         * Values a sensor produces. For event based sensors it is always 1, such as 
         * </pre>
         */
        public int getValueCount() {
          return value_.size();
        }
        /**
         * <code>repeated float value = 1 [packed = true];</code>
         *
         * <pre>
         * Values a sensor produces. For event based sensors it is always 1, such as 
         * </pre>
         */
        public float getValue(int index) {
          return value_.get(index);
        }
        private int valueMemoizedSerializedSize = -1;

        private void initFields() {
          value_ = java.util.Collections.emptyList();
        }
        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized != -1) return isInitialized == 1;

          memoizedIsInitialized = 1;
          return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          getSerializedSize();
          if (getValueList().size() > 0) {
            output.writeRawVarint32(10);
            output.writeRawVarint32(valueMemoizedSerializedSize);
          }
          for (int i = 0; i < value_.size(); i++) {
            output.writeFloatNoTag(value_.get(i));
          }
          getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;
        public int getSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          {
            int dataSize = 0;
            dataSize = 4 * getValueList().size();
            size += dataSize;
            if (!getValueList().isEmpty()) {
              size += 1;
              size += com.google.protobuf.CodedOutputStream
                  .computeInt32SizeNoTag(dataSize);
            }
            valueMemoizedSerializedSize = dataSize;
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSerializedSize = size;
          return size;
        }

        private static final long serialVersionUID = 0L;
        @java.lang.Override
        protected java.lang.Object writeReplace()
            throws java.io.ObjectStreamException {
          return super.writeReplace();
        }

        public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return PARSER.parseFrom(input);
        }
        public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseFrom(input, extensionRegistry);
        }
        public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return PARSER.parseDelimitedFrom(input);
        }
        public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }
        public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return PARSER.parseFrom(input);
        }
        public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() { return Builder.create(); }
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder(gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues prototype) {
          return newBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() { return newBuilder(this); }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code perfloc.SensorReading.SensorEvent.SensorValues}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessage.Builder<Builder>
           implements gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValuesOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return gov.nist.perfloc.SensorData.internal_static_perfloc_SensorReading_SensorEvent_SensorValues_descriptor;
          }

          protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return gov.nist.perfloc.SensorData.internal_static_perfloc_SensorReading_SensorEvent_SensorValues_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues.class, gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues.Builder.class);
          }

          // Construct using gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            }
          }
          private static Builder create() {
            return new Builder();
          }

          public Builder clear() {
            super.clear();
            value_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
            return this;
          }

          public Builder clone() {
            return create().mergeFrom(buildPartial());
          }

          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return gov.nist.perfloc.SensorData.internal_static_perfloc_SensorReading_SensorEvent_SensorValues_descriptor;
          }

          public gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues getDefaultInstanceForType() {
            return gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues.getDefaultInstance();
          }

          public gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues build() {
            gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          public gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues buildPartial() {
            gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues result = new gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues(this);
            int from_bitField0_ = bitField0_;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
              value_ = java.util.Collections.unmodifiableList(value_);
              bitField0_ = (bitField0_ & ~0x00000001);
            }
            result.value_ = value_;
            onBuilt();
            return result;
          }

          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues) {
              return mergeFrom((gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues other) {
            if (other == gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues.getDefaultInstance()) return this;
            if (!other.value_.isEmpty()) {
              if (value_.isEmpty()) {
                value_ = other.value_;
                bitField0_ = (bitField0_ & ~0x00000001);
              } else {
                ensureValueIsMutable();
                value_.addAll(other.value_);
              }
              onChanged();
            }
            this.mergeUnknownFields(other.getUnknownFields());
            return this;
          }

          public final boolean isInitialized() {
            return true;
          }

          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues) e.getUnfinishedMessage();
              throw e;
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }
          private int bitField0_;

          // repeated float value = 1 [packed = true];
          private java.util.List<java.lang.Float> value_ = java.util.Collections.emptyList();
          private void ensureValueIsMutable() {
            if (!((bitField0_ & 0x00000001) == 0x00000001)) {
              value_ = new java.util.ArrayList<java.lang.Float>(value_);
              bitField0_ |= 0x00000001;
             }
          }
          /**
           * <code>repeated float value = 1 [packed = true];</code>
           *
           * <pre>
           * Values a sensor produces. For event based sensors it is always 1, such as 
           * </pre>
           */
          public java.util.List<java.lang.Float>
              getValueList() {
            return java.util.Collections.unmodifiableList(value_);
          }
          /**
           * <code>repeated float value = 1 [packed = true];</code>
           *
           * <pre>
           * Values a sensor produces. For event based sensors it is always 1, such as 
           * </pre>
           */
          public int getValueCount() {
            return value_.size();
          }
          /**
           * <code>repeated float value = 1 [packed = true];</code>
           *
           * <pre>
           * Values a sensor produces. For event based sensors it is always 1, such as 
           * </pre>
           */
          public float getValue(int index) {
            return value_.get(index);
          }
          /**
           * <code>repeated float value = 1 [packed = true];</code>
           *
           * <pre>
           * Values a sensor produces. For event based sensors it is always 1, such as 
           * </pre>
           */
          public Builder setValue(
              int index, float value) {
            ensureValueIsMutable();
            value_.set(index, value);
            onChanged();
            return this;
          }
          /**
           * <code>repeated float value = 1 [packed = true];</code>
           *
           * <pre>
           * Values a sensor produces. For event based sensors it is always 1, such as 
           * </pre>
           */
          public Builder addValue(float value) {
            ensureValueIsMutable();
            value_.add(value);
            onChanged();
            return this;
          }
          /**
           * <code>repeated float value = 1 [packed = true];</code>
           *
           * <pre>
           * Values a sensor produces. For event based sensors it is always 1, such as 
           * </pre>
           */
          public Builder addAllValue(
              java.lang.Iterable<? extends java.lang.Float> values) {
            ensureValueIsMutable();
            super.addAll(values, value_);
            onChanged();
            return this;
          }
          /**
           * <code>repeated float value = 1 [packed = true];</code>
           *
           * <pre>
           * Values a sensor produces. For event based sensors it is always 1, such as 
           * </pre>
           */
          public Builder clearValue() {
            value_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);
            onChanged();
            return this;
          }

          // @@protoc_insertion_point(builder_scope:perfloc.SensorReading.SensorEvent.SensorValues)
        }

        static {
          defaultInstance = new SensorValues(true);
          defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:perfloc.SensorReading.SensorEvent.SensorValues)
      }

      public interface SensorOrBuilder
          extends com.google.protobuf.MessageOrBuilder {

        // optional int32 type = 1;
        /**
         * <code>optional int32 type = 1;</code>
         *
         * <pre>
         * generic type of this sensor
         * </pre>
         */
        boolean hasType();
        /**
         * <code>optional int32 type = 1;</code>
         *
         * <pre>
         * generic type of this sensor
         * </pre>
         */
        int getType();

        // optional string string_type = 2;
        /**
         * <code>optional string string_type = 2;</code>
         *
         * <pre>
         * The type of this sensor as a string
         * </pre>
         */
        boolean hasStringType();
        /**
         * <code>optional string string_type = 2;</code>
         *
         * <pre>
         * The type of this sensor as a string
         * </pre>
         */
        java.lang.String getStringType();
        /**
         * <code>optional string string_type = 2;</code>
         *
         * <pre>
         * The type of this sensor as a string
         * </pre>
         */
        com.google.protobuf.ByteString
            getStringTypeBytes();

        // optional string name = 3;
        /**
         * <code>optional string name = 3;</code>
         *
         * <pre>
         * name string of the sensor
         * </pre>
         */
        boolean hasName();
        /**
         * <code>optional string name = 3;</code>
         *
         * <pre>
         * name string of the sensor
         * </pre>
         */
        java.lang.String getName();
        /**
         * <code>optional string name = 3;</code>
         *
         * <pre>
         * name string of the sensor
         * </pre>
         */
        com.google.protobuf.ByteString
            getNameBytes();

        // optional bool is_wakeup_sensor = 4;
        /**
         * <code>optional bool is_wakeup_sensor = 4;</code>
         *
         * <pre>
         * Returns true if the sensor is a wake-up sensor. See http://developer.android.com/reference/android/hardware/Sensor.html#isWakeUpSensor()
         * </pre>
         */
        boolean hasIsWakeupSensor();
        /**
         * <code>optional bool is_wakeup_sensor = 4;</code>
         *
         * <pre>
         * Returns true if the sensor is a wake-up sensor. See http://developer.android.com/reference/android/hardware/Sensor.html#isWakeUpSensor()
         * </pre>
         */
        boolean getIsWakeupSensor();

        // optional string vendor = 5;
        /**
         * <code>optional string vendor = 5;</code>
         *
         * <pre>
         * vendor string of this sensor
         * </pre>
         */
        boolean hasVendor();
        /**
         * <code>optional string vendor = 5;</code>
         *
         * <pre>
         * vendor string of this sensor
         * </pre>
         */
        java.lang.String getVendor();
        /**
         * <code>optional string vendor = 5;</code>
         *
         * <pre>
         * vendor string of this sensor
         * </pre>
         */
        com.google.protobuf.ByteString
            getVendorBytes();

        // optional int32 version = 6;
        /**
         * <code>optional int32 version = 6;</code>
         *
         * <pre>
         * version of the sensor's module
         * </pre>
         */
        boolean hasVersion();
        /**
         * <code>optional int32 version = 6;</code>
         *
         * <pre>
         * version of the sensor's module
         * </pre>
         */
        int getVersion();

        // optional float resolution = 7;
        /**
         * <code>optional float resolution = 7;</code>
         *
         * <pre>
         * resolution of the sensor in the sensor's unit
         * </pre>
         */
        boolean hasResolution();
        /**
         * <code>optional float resolution = 7;</code>
         *
         * <pre>
         * resolution of the sensor in the sensor's unit
         * </pre>
         */
        float getResolution();

        // optional int32 reporting_mode = 8;
        /**
         * <code>optional int32 reporting_mode = 8;</code>
         *
         * <pre>
         * Each sensor has exactly one reporting mode associated with it. This method returns the reporting mode constant for this sensor type. {REPORTING_MODE_CONTINUOUS, REPORTING_MODE_ON_CHANGE, REPORTING_MODE_ONE_SHOT, REPORTING_MODE_SPECIAL_TRIGGER}
         * </pre>
         */
        boolean hasReportingMode();
        /**
         * <code>optional int32 reporting_mode = 8;</code>
         *
         * <pre>
         * Each sensor has exactly one reporting mode associated with it. This method returns the reporting mode constant for this sensor type. {REPORTING_MODE_CONTINUOUS, REPORTING_MODE_ON_CHANGE, REPORTING_MODE_ONE_SHOT, REPORTING_MODE_SPECIAL_TRIGGER}
         * </pre>
         */
        int getReportingMode();

        // optional float power = 9;
        /**
         * <code>optional float power = 9;</code>
         *
         * <pre>
         * the power in mA used by this sensor while in use
         * </pre>
         */
        boolean hasPower();
        /**
         * <code>optional float power = 9;</code>
         *
         * <pre>
         * the power in mA used by this sensor while in use
         * </pre>
         */
        float getPower();
      }
      /**
       * Protobuf type {@code perfloc.SensorReading.SensorEvent.Sensor}
       *
       * <pre>
       * This message should be moved to metadata.proto (whops.. it's already there)
       * </pre>
       */
      public static final class Sensor extends
          com.google.protobuf.GeneratedMessage
          implements SensorOrBuilder {
        // Use Sensor.newBuilder() to construct.
        private Sensor(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
          super(builder);
          this.unknownFields = builder.getUnknownFields();
        }
        private Sensor(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

        private static final Sensor defaultInstance;
        public static Sensor getDefaultInstance() {
          return defaultInstance;
        }

        public Sensor getDefaultInstanceForType() {
          return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;
        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
            getUnknownFields() {
          return this.unknownFields;
        }
        private Sensor(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          initFields();
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(input, unknownFields,
                                         extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  bitField0_ |= 0x00000001;
                  type_ = input.readInt32();
                  break;
                }
                case 18: {
                  bitField0_ |= 0x00000002;
                  stringType_ = input.readBytes();
                  break;
                }
                case 26: {
                  bitField0_ |= 0x00000004;
                  name_ = input.readBytes();
                  break;
                }
                case 32: {
                  bitField0_ |= 0x00000008;
                  isWakeupSensor_ = input.readBool();
                  break;
                }
                case 42: {
                  bitField0_ |= 0x00000010;
                  vendor_ = input.readBytes();
                  break;
                }
                case 48: {
                  bitField0_ |= 0x00000020;
                  version_ = input.readInt32();
                  break;
                }
                case 61: {
                  bitField0_ |= 0x00000040;
                  resolution_ = input.readFloat();
                  break;
                }
                case 64: {
                  bitField0_ |= 0x00000080;
                  reportingMode_ = input.readInt32();
                  break;
                }
                case 77: {
                  bitField0_ |= 0x00000100;
                  power_ = input.readFloat();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return gov.nist.perfloc.SensorData.internal_static_perfloc_SensorReading_SensorEvent_Sensor_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return gov.nist.perfloc.SensorData.internal_static_perfloc_SensorReading_SensorEvent_Sensor_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor.class, gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor.Builder.class);
        }

        public static com.google.protobuf.Parser<Sensor> PARSER =
            new com.google.protobuf.AbstractParser<Sensor>() {
          public Sensor parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new Sensor(input, extensionRegistry);
          }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<Sensor> getParserForType() {
          return PARSER;
        }

        private int bitField0_;
        // optional int32 type = 1;
        public static final int TYPE_FIELD_NUMBER = 1;
        private int type_;
        /**
         * <code>optional int32 type = 1;</code>
         *
         * <pre>
         * generic type of this sensor
         * </pre>
         */
        public boolean hasType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 type = 1;</code>
         *
         * <pre>
         * generic type of this sensor
         * </pre>
         */
        public int getType() {
          return type_;
        }

        // optional string string_type = 2;
        public static final int STRING_TYPE_FIELD_NUMBER = 2;
        private java.lang.Object stringType_;
        /**
         * <code>optional string string_type = 2;</code>
         *
         * <pre>
         * The type of this sensor as a string
         * </pre>
         */
        public boolean hasStringType() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional string string_type = 2;</code>
         *
         * <pre>
         * The type of this sensor as a string
         * </pre>
         */
        public java.lang.String getStringType() {
          java.lang.Object ref = stringType_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              stringType_ = s;
            }
            return s;
          }
        }
        /**
         * <code>optional string string_type = 2;</code>
         *
         * <pre>
         * The type of this sensor as a string
         * </pre>
         */
        public com.google.protobuf.ByteString
            getStringTypeBytes() {
          java.lang.Object ref = stringType_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            stringType_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        // optional string name = 3;
        public static final int NAME_FIELD_NUMBER = 3;
        private java.lang.Object name_;
        /**
         * <code>optional string name = 3;</code>
         *
         * <pre>
         * name string of the sensor
         * </pre>
         */
        public boolean hasName() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional string name = 3;</code>
         *
         * <pre>
         * name string of the sensor
         * </pre>
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              name_ = s;
            }
            return s;
          }
        }
        /**
         * <code>optional string name = 3;</code>
         *
         * <pre>
         * name string of the sensor
         * </pre>
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        // optional bool is_wakeup_sensor = 4;
        public static final int IS_WAKEUP_SENSOR_FIELD_NUMBER = 4;
        private boolean isWakeupSensor_;
        /**
         * <code>optional bool is_wakeup_sensor = 4;</code>
         *
         * <pre>
         * Returns true if the sensor is a wake-up sensor. See http://developer.android.com/reference/android/hardware/Sensor.html#isWakeUpSensor()
         * </pre>
         */
        public boolean hasIsWakeupSensor() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional bool is_wakeup_sensor = 4;</code>
         *
         * <pre>
         * Returns true if the sensor is a wake-up sensor. See http://developer.android.com/reference/android/hardware/Sensor.html#isWakeUpSensor()
         * </pre>
         */
        public boolean getIsWakeupSensor() {
          return isWakeupSensor_;
        }

        // optional string vendor = 5;
        public static final int VENDOR_FIELD_NUMBER = 5;
        private java.lang.Object vendor_;
        /**
         * <code>optional string vendor = 5;</code>
         *
         * <pre>
         * vendor string of this sensor
         * </pre>
         */
        public boolean hasVendor() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional string vendor = 5;</code>
         *
         * <pre>
         * vendor string of this sensor
         * </pre>
         */
        public java.lang.String getVendor() {
          java.lang.Object ref = vendor_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              vendor_ = s;
            }
            return s;
          }
        }
        /**
         * <code>optional string vendor = 5;</code>
         *
         * <pre>
         * vendor string of this sensor
         * </pre>
         */
        public com.google.protobuf.ByteString
            getVendorBytes() {
          java.lang.Object ref = vendor_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            vendor_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        // optional int32 version = 6;
        public static final int VERSION_FIELD_NUMBER = 6;
        private int version_;
        /**
         * <code>optional int32 version = 6;</code>
         *
         * <pre>
         * version of the sensor's module
         * </pre>
         */
        public boolean hasVersion() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>optional int32 version = 6;</code>
         *
         * <pre>
         * version of the sensor's module
         * </pre>
         */
        public int getVersion() {
          return version_;
        }

        // optional float resolution = 7;
        public static final int RESOLUTION_FIELD_NUMBER = 7;
        private float resolution_;
        /**
         * <code>optional float resolution = 7;</code>
         *
         * <pre>
         * resolution of the sensor in the sensor's unit
         * </pre>
         */
        public boolean hasResolution() {
          return ((bitField0_ & 0x00000040) == 0x00000040);
        }
        /**
         * <code>optional float resolution = 7;</code>
         *
         * <pre>
         * resolution of the sensor in the sensor's unit
         * </pre>
         */
        public float getResolution() {
          return resolution_;
        }

        // optional int32 reporting_mode = 8;
        public static final int REPORTING_MODE_FIELD_NUMBER = 8;
        private int reportingMode_;
        /**
         * <code>optional int32 reporting_mode = 8;</code>
         *
         * <pre>
         * Each sensor has exactly one reporting mode associated with it. This method returns the reporting mode constant for this sensor type. {REPORTING_MODE_CONTINUOUS, REPORTING_MODE_ON_CHANGE, REPORTING_MODE_ONE_SHOT, REPORTING_MODE_SPECIAL_TRIGGER}
         * </pre>
         */
        public boolean hasReportingMode() {
          return ((bitField0_ & 0x00000080) == 0x00000080);
        }
        /**
         * <code>optional int32 reporting_mode = 8;</code>
         *
         * <pre>
         * Each sensor has exactly one reporting mode associated with it. This method returns the reporting mode constant for this sensor type. {REPORTING_MODE_CONTINUOUS, REPORTING_MODE_ON_CHANGE, REPORTING_MODE_ONE_SHOT, REPORTING_MODE_SPECIAL_TRIGGER}
         * </pre>
         */
        public int getReportingMode() {
          return reportingMode_;
        }

        // optional float power = 9;
        public static final int POWER_FIELD_NUMBER = 9;
        private float power_;
        /**
         * <code>optional float power = 9;</code>
         *
         * <pre>
         * the power in mA used by this sensor while in use
         * </pre>
         */
        public boolean hasPower() {
          return ((bitField0_ & 0x00000100) == 0x00000100);
        }
        /**
         * <code>optional float power = 9;</code>
         *
         * <pre>
         * the power in mA used by this sensor while in use
         * </pre>
         */
        public float getPower() {
          return power_;
        }

        private void initFields() {
          type_ = 0;
          stringType_ = "";
          name_ = "";
          isWakeupSensor_ = false;
          vendor_ = "";
          version_ = 0;
          resolution_ = 0F;
          reportingMode_ = 0;
          power_ = 0F;
        }
        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized != -1) return isInitialized == 1;

          memoizedIsInitialized = 1;
          return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          getSerializedSize();
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeInt32(1, type_);
          }
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeBytes(2, getStringTypeBytes());
          }
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            output.writeBytes(3, getNameBytes());
          }
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            output.writeBool(4, isWakeupSensor_);
          }
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            output.writeBytes(5, getVendorBytes());
          }
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            output.writeInt32(6, version_);
          }
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            output.writeFloat(7, resolution_);
          }
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            output.writeInt32(8, reportingMode_);
          }
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            output.writeFloat(9, power_);
          }
          getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;
        public int getSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += com.google.protobuf.CodedOutputStream
              .computeInt32Size(1, type_);
          }
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += com.google.protobuf.CodedOutputStream
              .computeBytesSize(2, getStringTypeBytes());
          }
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            size += com.google.protobuf.CodedOutputStream
              .computeBytesSize(3, getNameBytes());
          }
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            size += com.google.protobuf.CodedOutputStream
              .computeBoolSize(4, isWakeupSensor_);
          }
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            size += com.google.protobuf.CodedOutputStream
              .computeBytesSize(5, getVendorBytes());
          }
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            size += com.google.protobuf.CodedOutputStream
              .computeInt32Size(6, version_);
          }
          if (((bitField0_ & 0x00000040) == 0x00000040)) {
            size += com.google.protobuf.CodedOutputStream
              .computeFloatSize(7, resolution_);
          }
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            size += com.google.protobuf.CodedOutputStream
              .computeInt32Size(8, reportingMode_);
          }
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            size += com.google.protobuf.CodedOutputStream
              .computeFloatSize(9, power_);
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSerializedSize = size;
          return size;
        }

        private static final long serialVersionUID = 0L;
        @java.lang.Override
        protected java.lang.Object writeReplace()
            throws java.io.ObjectStreamException {
          return super.writeReplace();
        }

        public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return PARSER.parseFrom(input);
        }
        public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseFrom(input, extensionRegistry);
        }
        public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return PARSER.parseDelimitedFrom(input);
        }
        public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }
        public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return PARSER.parseFrom(input);
        }
        public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() { return Builder.create(); }
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder(gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor prototype) {
          return newBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() { return newBuilder(this); }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code perfloc.SensorReading.SensorEvent.Sensor}
         *
         * <pre>
         * This message should be moved to metadata.proto (whops.. it's already there)
         * </pre>
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessage.Builder<Builder>
           implements gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return gov.nist.perfloc.SensorData.internal_static_perfloc_SensorReading_SensorEvent_Sensor_descriptor;
          }

          protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return gov.nist.perfloc.SensorData.internal_static_perfloc_SensorReading_SensorEvent_Sensor_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor.class, gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor.Builder.class);
          }

          // Construct using gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            }
          }
          private static Builder create() {
            return new Builder();
          }

          public Builder clear() {
            super.clear();
            type_ = 0;
            bitField0_ = (bitField0_ & ~0x00000001);
            stringType_ = "";
            bitField0_ = (bitField0_ & ~0x00000002);
            name_ = "";
            bitField0_ = (bitField0_ & ~0x00000004);
            isWakeupSensor_ = false;
            bitField0_ = (bitField0_ & ~0x00000008);
            vendor_ = "";
            bitField0_ = (bitField0_ & ~0x00000010);
            version_ = 0;
            bitField0_ = (bitField0_ & ~0x00000020);
            resolution_ = 0F;
            bitField0_ = (bitField0_ & ~0x00000040);
            reportingMode_ = 0;
            bitField0_ = (bitField0_ & ~0x00000080);
            power_ = 0F;
            bitField0_ = (bitField0_ & ~0x00000100);
            return this;
          }

          public Builder clone() {
            return create().mergeFrom(buildPartial());
          }

          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return gov.nist.perfloc.SensorData.internal_static_perfloc_SensorReading_SensorEvent_Sensor_descriptor;
          }

          public gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor getDefaultInstanceForType() {
            return gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor.getDefaultInstance();
          }

          public gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor build() {
            gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          public gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor buildPartial() {
            gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor result = new gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
              to_bitField0_ |= 0x00000001;
            }
            result.type_ = type_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
              to_bitField0_ |= 0x00000002;
            }
            result.stringType_ = stringType_;
            if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
              to_bitField0_ |= 0x00000004;
            }
            result.name_ = name_;
            if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
              to_bitField0_ |= 0x00000008;
            }
            result.isWakeupSensor_ = isWakeupSensor_;
            if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
              to_bitField0_ |= 0x00000010;
            }
            result.vendor_ = vendor_;
            if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
              to_bitField0_ |= 0x00000020;
            }
            result.version_ = version_;
            if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
              to_bitField0_ |= 0x00000040;
            }
            result.resolution_ = resolution_;
            if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
              to_bitField0_ |= 0x00000080;
            }
            result.reportingMode_ = reportingMode_;
            if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
              to_bitField0_ |= 0x00000100;
            }
            result.power_ = power_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
          }

          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor) {
              return mergeFrom((gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor other) {
            if (other == gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor.getDefaultInstance()) return this;
            if (other.hasType()) {
              setType(other.getType());
            }
            if (other.hasStringType()) {
              bitField0_ |= 0x00000002;
              stringType_ = other.stringType_;
              onChanged();
            }
            if (other.hasName()) {
              bitField0_ |= 0x00000004;
              name_ = other.name_;
              onChanged();
            }
            if (other.hasIsWakeupSensor()) {
              setIsWakeupSensor(other.getIsWakeupSensor());
            }
            if (other.hasVendor()) {
              bitField0_ |= 0x00000010;
              vendor_ = other.vendor_;
              onChanged();
            }
            if (other.hasVersion()) {
              setVersion(other.getVersion());
            }
            if (other.hasResolution()) {
              setResolution(other.getResolution());
            }
            if (other.hasReportingMode()) {
              setReportingMode(other.getReportingMode());
            }
            if (other.hasPower()) {
              setPower(other.getPower());
            }
            this.mergeUnknownFields(other.getUnknownFields());
            return this;
          }

          public final boolean isInitialized() {
            return true;
          }

          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Sensor) e.getUnfinishedMessage();
              throw e;
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }
          private int bitField0_;

          // optional int32 type = 1;
          private int type_ ;
          /**
           * <code>optional int32 type = 1;</code>
           *
           * <pre>
           * generic type of this sensor
           * </pre>
           */
          public boolean hasType() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
          }
          /**
           * <code>optional int32 type = 1;</code>
           *
           * <pre>
           * generic type of this sensor
           * </pre>
           */
          public int getType() {
            return type_;
          }
          /**
           * <code>optional int32 type = 1;</code>
           *
           * <pre>
           * generic type of this sensor
           * </pre>
           */
          public Builder setType(int value) {
            bitField0_ |= 0x00000001;
            type_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional int32 type = 1;</code>
           *
           * <pre>
           * generic type of this sensor
           * </pre>
           */
          public Builder clearType() {
            bitField0_ = (bitField0_ & ~0x00000001);
            type_ = 0;
            onChanged();
            return this;
          }

          // optional string string_type = 2;
          private java.lang.Object stringType_ = "";
          /**
           * <code>optional string string_type = 2;</code>
           *
           * <pre>
           * The type of this sensor as a string
           * </pre>
           */
          public boolean hasStringType() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
          }
          /**
           * <code>optional string string_type = 2;</code>
           *
           * <pre>
           * The type of this sensor as a string
           * </pre>
           */
          public java.lang.String getStringType() {
            java.lang.Object ref = stringType_;
            if (!(ref instanceof java.lang.String)) {
              java.lang.String s = ((com.google.protobuf.ByteString) ref)
                  .toStringUtf8();
              stringType_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <code>optional string string_type = 2;</code>
           *
           * <pre>
           * The type of this sensor as a string
           * </pre>
           */
          public com.google.protobuf.ByteString
              getStringTypeBytes() {
            java.lang.Object ref = stringType_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              stringType_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <code>optional string string_type = 2;</code>
           *
           * <pre>
           * The type of this sensor as a string
           * </pre>
           */
          public Builder setStringType(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
            stringType_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional string string_type = 2;</code>
           *
           * <pre>
           * The type of this sensor as a string
           * </pre>
           */
          public Builder clearStringType() {
            bitField0_ = (bitField0_ & ~0x00000002);
            stringType_ = getDefaultInstance().getStringType();
            onChanged();
            return this;
          }
          /**
           * <code>optional string string_type = 2;</code>
           *
           * <pre>
           * The type of this sensor as a string
           * </pre>
           */
          public Builder setStringTypeBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
            stringType_ = value;
            onChanged();
            return this;
          }

          // optional string name = 3;
          private java.lang.Object name_ = "";
          /**
           * <code>optional string name = 3;</code>
           *
           * <pre>
           * name string of the sensor
           * </pre>
           */
          public boolean hasName() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
          }
          /**
           * <code>optional string name = 3;</code>
           *
           * <pre>
           * name string of the sensor
           * </pre>
           */
          public java.lang.String getName() {
            java.lang.Object ref = name_;
            if (!(ref instanceof java.lang.String)) {
              java.lang.String s = ((com.google.protobuf.ByteString) ref)
                  .toStringUtf8();
              name_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <code>optional string name = 3;</code>
           *
           * <pre>
           * name string of the sensor
           * </pre>
           */
          public com.google.protobuf.ByteString
              getNameBytes() {
            java.lang.Object ref = name_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              name_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <code>optional string name = 3;</code>
           *
           * <pre>
           * name string of the sensor
           * </pre>
           */
          public Builder setName(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
            name_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional string name = 3;</code>
           *
           * <pre>
           * name string of the sensor
           * </pre>
           */
          public Builder clearName() {
            bitField0_ = (bitField0_ & ~0x00000004);
            name_ = getDefaultInstance().getName();
            onChanged();
            return this;
          }
          /**
           * <code>optional string name = 3;</code>
           *
           * <pre>
           * name string of the sensor
           * </pre>
           */
          public Builder setNameBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
            name_ = value;
            onChanged();
            return this;
          }

          // optional bool is_wakeup_sensor = 4;
          private boolean isWakeupSensor_ ;
          /**
           * <code>optional bool is_wakeup_sensor = 4;</code>
           *
           * <pre>
           * Returns true if the sensor is a wake-up sensor. See http://developer.android.com/reference/android/hardware/Sensor.html#isWakeUpSensor()
           * </pre>
           */
          public boolean hasIsWakeupSensor() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
          }
          /**
           * <code>optional bool is_wakeup_sensor = 4;</code>
           *
           * <pre>
           * Returns true if the sensor is a wake-up sensor. See http://developer.android.com/reference/android/hardware/Sensor.html#isWakeUpSensor()
           * </pre>
           */
          public boolean getIsWakeupSensor() {
            return isWakeupSensor_;
          }
          /**
           * <code>optional bool is_wakeup_sensor = 4;</code>
           *
           * <pre>
           * Returns true if the sensor is a wake-up sensor. See http://developer.android.com/reference/android/hardware/Sensor.html#isWakeUpSensor()
           * </pre>
           */
          public Builder setIsWakeupSensor(boolean value) {
            bitField0_ |= 0x00000008;
            isWakeupSensor_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional bool is_wakeup_sensor = 4;</code>
           *
           * <pre>
           * Returns true if the sensor is a wake-up sensor. See http://developer.android.com/reference/android/hardware/Sensor.html#isWakeUpSensor()
           * </pre>
           */
          public Builder clearIsWakeupSensor() {
            bitField0_ = (bitField0_ & ~0x00000008);
            isWakeupSensor_ = false;
            onChanged();
            return this;
          }

          // optional string vendor = 5;
          private java.lang.Object vendor_ = "";
          /**
           * <code>optional string vendor = 5;</code>
           *
           * <pre>
           * vendor string of this sensor
           * </pre>
           */
          public boolean hasVendor() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
          }
          /**
           * <code>optional string vendor = 5;</code>
           *
           * <pre>
           * vendor string of this sensor
           * </pre>
           */
          public java.lang.String getVendor() {
            java.lang.Object ref = vendor_;
            if (!(ref instanceof java.lang.String)) {
              java.lang.String s = ((com.google.protobuf.ByteString) ref)
                  .toStringUtf8();
              vendor_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <code>optional string vendor = 5;</code>
           *
           * <pre>
           * vendor string of this sensor
           * </pre>
           */
          public com.google.protobuf.ByteString
              getVendorBytes() {
            java.lang.Object ref = vendor_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              vendor_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <code>optional string vendor = 5;</code>
           *
           * <pre>
           * vendor string of this sensor
           * </pre>
           */
          public Builder setVendor(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
            vendor_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional string vendor = 5;</code>
           *
           * <pre>
           * vendor string of this sensor
           * </pre>
           */
          public Builder clearVendor() {
            bitField0_ = (bitField0_ & ~0x00000010);
            vendor_ = getDefaultInstance().getVendor();
            onChanged();
            return this;
          }
          /**
           * <code>optional string vendor = 5;</code>
           *
           * <pre>
           * vendor string of this sensor
           * </pre>
           */
          public Builder setVendorBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
            vendor_ = value;
            onChanged();
            return this;
          }

          // optional int32 version = 6;
          private int version_ ;
          /**
           * <code>optional int32 version = 6;</code>
           *
           * <pre>
           * version of the sensor's module
           * </pre>
           */
          public boolean hasVersion() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
          }
          /**
           * <code>optional int32 version = 6;</code>
           *
           * <pre>
           * version of the sensor's module
           * </pre>
           */
          public int getVersion() {
            return version_;
          }
          /**
           * <code>optional int32 version = 6;</code>
           *
           * <pre>
           * version of the sensor's module
           * </pre>
           */
          public Builder setVersion(int value) {
            bitField0_ |= 0x00000020;
            version_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional int32 version = 6;</code>
           *
           * <pre>
           * version of the sensor's module
           * </pre>
           */
          public Builder clearVersion() {
            bitField0_ = (bitField0_ & ~0x00000020);
            version_ = 0;
            onChanged();
            return this;
          }

          // optional float resolution = 7;
          private float resolution_ ;
          /**
           * <code>optional float resolution = 7;</code>
           *
           * <pre>
           * resolution of the sensor in the sensor's unit
           * </pre>
           */
          public boolean hasResolution() {
            return ((bitField0_ & 0x00000040) == 0x00000040);
          }
          /**
           * <code>optional float resolution = 7;</code>
           *
           * <pre>
           * resolution of the sensor in the sensor's unit
           * </pre>
           */
          public float getResolution() {
            return resolution_;
          }
          /**
           * <code>optional float resolution = 7;</code>
           *
           * <pre>
           * resolution of the sensor in the sensor's unit
           * </pre>
           */
          public Builder setResolution(float value) {
            bitField0_ |= 0x00000040;
            resolution_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional float resolution = 7;</code>
           *
           * <pre>
           * resolution of the sensor in the sensor's unit
           * </pre>
           */
          public Builder clearResolution() {
            bitField0_ = (bitField0_ & ~0x00000040);
            resolution_ = 0F;
            onChanged();
            return this;
          }

          // optional int32 reporting_mode = 8;
          private int reportingMode_ ;
          /**
           * <code>optional int32 reporting_mode = 8;</code>
           *
           * <pre>
           * Each sensor has exactly one reporting mode associated with it. This method returns the reporting mode constant for this sensor type. {REPORTING_MODE_CONTINUOUS, REPORTING_MODE_ON_CHANGE, REPORTING_MODE_ONE_SHOT, REPORTING_MODE_SPECIAL_TRIGGER}
           * </pre>
           */
          public boolean hasReportingMode() {
            return ((bitField0_ & 0x00000080) == 0x00000080);
          }
          /**
           * <code>optional int32 reporting_mode = 8;</code>
           *
           * <pre>
           * Each sensor has exactly one reporting mode associated with it. This method returns the reporting mode constant for this sensor type. {REPORTING_MODE_CONTINUOUS, REPORTING_MODE_ON_CHANGE, REPORTING_MODE_ONE_SHOT, REPORTING_MODE_SPECIAL_TRIGGER}
           * </pre>
           */
          public int getReportingMode() {
            return reportingMode_;
          }
          /**
           * <code>optional int32 reporting_mode = 8;</code>
           *
           * <pre>
           * Each sensor has exactly one reporting mode associated with it. This method returns the reporting mode constant for this sensor type. {REPORTING_MODE_CONTINUOUS, REPORTING_MODE_ON_CHANGE, REPORTING_MODE_ONE_SHOT, REPORTING_MODE_SPECIAL_TRIGGER}
           * </pre>
           */
          public Builder setReportingMode(int value) {
            bitField0_ |= 0x00000080;
            reportingMode_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional int32 reporting_mode = 8;</code>
           *
           * <pre>
           * Each sensor has exactly one reporting mode associated with it. This method returns the reporting mode constant for this sensor type. {REPORTING_MODE_CONTINUOUS, REPORTING_MODE_ON_CHANGE, REPORTING_MODE_ONE_SHOT, REPORTING_MODE_SPECIAL_TRIGGER}
           * </pre>
           */
          public Builder clearReportingMode() {
            bitField0_ = (bitField0_ & ~0x00000080);
            reportingMode_ = 0;
            onChanged();
            return this;
          }

          // optional float power = 9;
          private float power_ ;
          /**
           * <code>optional float power = 9;</code>
           *
           * <pre>
           * the power in mA used by this sensor while in use
           * </pre>
           */
          public boolean hasPower() {
            return ((bitField0_ & 0x00000100) == 0x00000100);
          }
          /**
           * <code>optional float power = 9;</code>
           *
           * <pre>
           * the power in mA used by this sensor while in use
           * </pre>
           */
          public float getPower() {
            return power_;
          }
          /**
           * <code>optional float power = 9;</code>
           *
           * <pre>
           * the power in mA used by this sensor while in use
           * </pre>
           */
          public Builder setPower(float value) {
            bitField0_ |= 0x00000100;
            power_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional float power = 9;</code>
           *
           * <pre>
           * the power in mA used by this sensor while in use
           * </pre>
           */
          public Builder clearPower() {
            bitField0_ = (bitField0_ & ~0x00000100);
            power_ = 0F;
            onChanged();
            return this;
          }

          // @@protoc_insertion_point(builder_scope:perfloc.SensorReading.SensorEvent.Sensor)
        }

        static {
          defaultInstance = new Sensor(true);
          defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:perfloc.SensorReading.SensorEvent.Sensor)
      }

      private int bitField0_;
      // optional int32 sensor_type = 1;
      public static final int SENSOR_TYPE_FIELD_NUMBER = 1;
      private int sensorType_;
      /**
       * <code>optional int32 sensor_type = 1;</code>
       *
       * <pre>
       * Type of the sensor
       * </pre>
       */
      public boolean hasSensorType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 sensor_type = 1;</code>
       *
       * <pre>
       * Type of the sensor
       * </pre>
       */
      public int getSensorType() {
        return sensorType_;
      }

      // optional int64 timestamp = 2;
      public static final int TIMESTAMP_FIELD_NUMBER = 2;
      private long timestamp_;
      /**
       * <code>optional int64 timestamp = 2;</code>
       *
       * <pre>
       * timestamp in nanosecond at which the event happened
       * </pre>
       */
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 timestamp = 2;</code>
       *
       * <pre>
       * timestamp in nanosecond at which the event happened
       * </pre>
       */
      public long getTimestamp() {
        return timestamp_;
      }

      // optional int32 accuracy = 3;
      public static final int ACCURACY_FIELD_NUMBER = 3;
      private int accuracy_;
      /**
       * <code>optional int32 accuracy = 3;</code>
       */
      public boolean hasAccuracy() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 accuracy = 3;</code>
       */
      public int getAccuracy() {
        return accuracy_;
      }

      // optional .perfloc.SensorReading.SensorEvent.SensorValues values = 4;
      public static final int VALUES_FIELD_NUMBER = 4;
      private gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues values_;
      /**
       * <code>optional .perfloc.SensorReading.SensorEvent.SensorValues values = 4;</code>
       *
       * <pre>
       * Content of array values of a sensor event
       * </pre>
       */
      public boolean hasValues() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .perfloc.SensorReading.SensorEvent.SensorValues values = 4;</code>
       *
       * <pre>
       * Content of array values of a sensor event
       * </pre>
       */
      public gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues getValues() {
        return values_;
      }
      /**
       * <code>optional .perfloc.SensorReading.SensorEvent.SensorValues values = 4;</code>
       *
       * <pre>
       * Content of array values of a sensor event
       * </pre>
       */
      public gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValuesOrBuilder getValuesOrBuilder() {
        return values_;
      }

      private void initFields() {
        sensorType_ = 0;
        timestamp_ = 0L;
        accuracy_ = 0;
        values_ = gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, sensorType_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt64(2, timestamp_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeInt32(3, accuracy_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeMessage(4, values_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, sensorType_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt64Size(2, timestamp_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, accuracy_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, values_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static gov.nist.perfloc.SensorData.SensorReading.SensorEvent parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(gov.nist.perfloc.SensorData.SensorReading.SensorEvent prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code perfloc.SensorReading.SensorEvent}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements gov.nist.perfloc.SensorData.SensorReading.SensorEventOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return gov.nist.perfloc.SensorData.internal_static_perfloc_SensorReading_SensorEvent_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return gov.nist.perfloc.SensorData.internal_static_perfloc_SensorReading_SensorEvent_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  gov.nist.perfloc.SensorData.SensorReading.SensorEvent.class, gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Builder.class);
        }

        // Construct using gov.nist.perfloc.SensorData.SensorReading.SensorEvent.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getValuesFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          sensorType_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          timestamp_ = 0L;
          bitField0_ = (bitField0_ & ~0x00000002);
          accuracy_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          if (valuesBuilder_ == null) {
            values_ = gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues.getDefaultInstance();
          } else {
            valuesBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return gov.nist.perfloc.SensorData.internal_static_perfloc_SensorReading_SensorEvent_descriptor;
        }

        public gov.nist.perfloc.SensorData.SensorReading.SensorEvent getDefaultInstanceForType() {
          return gov.nist.perfloc.SensorData.SensorReading.SensorEvent.getDefaultInstance();
        }

        public gov.nist.perfloc.SensorData.SensorReading.SensorEvent build() {
          gov.nist.perfloc.SensorData.SensorReading.SensorEvent result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public gov.nist.perfloc.SensorData.SensorReading.SensorEvent buildPartial() {
          gov.nist.perfloc.SensorData.SensorReading.SensorEvent result = new gov.nist.perfloc.SensorData.SensorReading.SensorEvent(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.sensorType_ = sensorType_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.timestamp_ = timestamp_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.accuracy_ = accuracy_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          if (valuesBuilder_ == null) {
            result.values_ = values_;
          } else {
            result.values_ = valuesBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof gov.nist.perfloc.SensorData.SensorReading.SensorEvent) {
            return mergeFrom((gov.nist.perfloc.SensorData.SensorReading.SensorEvent)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(gov.nist.perfloc.SensorData.SensorReading.SensorEvent other) {
          if (other == gov.nist.perfloc.SensorData.SensorReading.SensorEvent.getDefaultInstance()) return this;
          if (other.hasSensorType()) {
            setSensorType(other.getSensorType());
          }
          if (other.hasTimestamp()) {
            setTimestamp(other.getTimestamp());
          }
          if (other.hasAccuracy()) {
            setAccuracy(other.getAccuracy());
          }
          if (other.hasValues()) {
            mergeValues(other.getValues());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          gov.nist.perfloc.SensorData.SensorReading.SensorEvent parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (gov.nist.perfloc.SensorData.SensorReading.SensorEvent) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // optional int32 sensor_type = 1;
        private int sensorType_ ;
        /**
         * <code>optional int32 sensor_type = 1;</code>
         *
         * <pre>
         * Type of the sensor
         * </pre>
         */
        public boolean hasSensorType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 sensor_type = 1;</code>
         *
         * <pre>
         * Type of the sensor
         * </pre>
         */
        public int getSensorType() {
          return sensorType_;
        }
        /**
         * <code>optional int32 sensor_type = 1;</code>
         *
         * <pre>
         * Type of the sensor
         * </pre>
         */
        public Builder setSensorType(int value) {
          bitField0_ |= 0x00000001;
          sensorType_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 sensor_type = 1;</code>
         *
         * <pre>
         * Type of the sensor
         * </pre>
         */
        public Builder clearSensorType() {
          bitField0_ = (bitField0_ & ~0x00000001);
          sensorType_ = 0;
          onChanged();
          return this;
        }

        // optional int64 timestamp = 2;
        private long timestamp_ ;
        /**
         * <code>optional int64 timestamp = 2;</code>
         *
         * <pre>
         * timestamp in nanosecond at which the event happened
         * </pre>
         */
        public boolean hasTimestamp() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional int64 timestamp = 2;</code>
         *
         * <pre>
         * timestamp in nanosecond at which the event happened
         * </pre>
         */
        public long getTimestamp() {
          return timestamp_;
        }
        /**
         * <code>optional int64 timestamp = 2;</code>
         *
         * <pre>
         * timestamp in nanosecond at which the event happened
         * </pre>
         */
        public Builder setTimestamp(long value) {
          bitField0_ |= 0x00000002;
          timestamp_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int64 timestamp = 2;</code>
         *
         * <pre>
         * timestamp in nanosecond at which the event happened
         * </pre>
         */
        public Builder clearTimestamp() {
          bitField0_ = (bitField0_ & ~0x00000002);
          timestamp_ = 0L;
          onChanged();
          return this;
        }

        // optional int32 accuracy = 3;
        private int accuracy_ ;
        /**
         * <code>optional int32 accuracy = 3;</code>
         */
        public boolean hasAccuracy() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional int32 accuracy = 3;</code>
         */
        public int getAccuracy() {
          return accuracy_;
        }
        /**
         * <code>optional int32 accuracy = 3;</code>
         */
        public Builder setAccuracy(int value) {
          bitField0_ |= 0x00000004;
          accuracy_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 accuracy = 3;</code>
         */
        public Builder clearAccuracy() {
          bitField0_ = (bitField0_ & ~0x00000004);
          accuracy_ = 0;
          onChanged();
          return this;
        }

        // optional .perfloc.SensorReading.SensorEvent.SensorValues values = 4;
        private gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues values_ = gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues, gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues.Builder, gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValuesOrBuilder> valuesBuilder_;
        /**
         * <code>optional .perfloc.SensorReading.SensorEvent.SensorValues values = 4;</code>
         *
         * <pre>
         * Content of array values of a sensor event
         * </pre>
         */
        public boolean hasValues() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional .perfloc.SensorReading.SensorEvent.SensorValues values = 4;</code>
         *
         * <pre>
         * Content of array values of a sensor event
         * </pre>
         */
        public gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues getValues() {
          if (valuesBuilder_ == null) {
            return values_;
          } else {
            return valuesBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .perfloc.SensorReading.SensorEvent.SensorValues values = 4;</code>
         *
         * <pre>
         * Content of array values of a sensor event
         * </pre>
         */
        public Builder setValues(gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues value) {
          if (valuesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            values_ = value;
            onChanged();
          } else {
            valuesBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .perfloc.SensorReading.SensorEvent.SensorValues values = 4;</code>
         *
         * <pre>
         * Content of array values of a sensor event
         * </pre>
         */
        public Builder setValues(
            gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues.Builder builderForValue) {
          if (valuesBuilder_ == null) {
            values_ = builderForValue.build();
            onChanged();
          } else {
            valuesBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .perfloc.SensorReading.SensorEvent.SensorValues values = 4;</code>
         *
         * <pre>
         * Content of array values of a sensor event
         * </pre>
         */
        public Builder mergeValues(gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues value) {
          if (valuesBuilder_ == null) {
            if (((bitField0_ & 0x00000008) == 0x00000008) &&
                values_ != gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues.getDefaultInstance()) {
              values_ =
                gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues.newBuilder(values_).mergeFrom(value).buildPartial();
            } else {
              values_ = value;
            }
            onChanged();
          } else {
            valuesBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000008;
          return this;
        }
        /**
         * <code>optional .perfloc.SensorReading.SensorEvent.SensorValues values = 4;</code>
         *
         * <pre>
         * Content of array values of a sensor event
         * </pre>
         */
        public Builder clearValues() {
          if (valuesBuilder_ == null) {
            values_ = gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues.getDefaultInstance();
            onChanged();
          } else {
            valuesBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000008);
          return this;
        }
        /**
         * <code>optional .perfloc.SensorReading.SensorEvent.SensorValues values = 4;</code>
         *
         * <pre>
         * Content of array values of a sensor event
         * </pre>
         */
        public gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues.Builder getValuesBuilder() {
          bitField0_ |= 0x00000008;
          onChanged();
          return getValuesFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .perfloc.SensorReading.SensorEvent.SensorValues values = 4;</code>
         *
         * <pre>
         * Content of array values of a sensor event
         * </pre>
         */
        public gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValuesOrBuilder getValuesOrBuilder() {
          if (valuesBuilder_ != null) {
            return valuesBuilder_.getMessageOrBuilder();
          } else {
            return values_;
          }
        }
        /**
         * <code>optional .perfloc.SensorReading.SensorEvent.SensorValues values = 4;</code>
         *
         * <pre>
         * Content of array values of a sensor event
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues, gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues.Builder, gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValuesOrBuilder> 
            getValuesFieldBuilder() {
          if (valuesBuilder_ == null) {
            valuesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues, gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValues.Builder, gov.nist.perfloc.SensorData.SensorReading.SensorEvent.SensorValuesOrBuilder>(
                    values_,
                    getParentForChildren(),
                    isClean());
            values_ = null;
          }
          return valuesBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:perfloc.SensorReading.SensorEvent)
      }

      static {
        defaultInstance = new SensorEvent(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:perfloc.SensorReading.SensorEvent)
    }

    private int bitField0_;
    // optional int64 sequence_nr = 1;
    public static final int SEQUENCE_NR_FIELD_NUMBER = 1;
    private long sequenceNr_;
    /**
     * <code>optional int64 sequence_nr = 1;</code>
     *
     * <pre>
     * Sequence number of a reading
     * </pre>
     */
    public boolean hasSequenceNr() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int64 sequence_nr = 1;</code>
     *
     * <pre>
     * Sequence number of a reading
     * </pre>
     */
    public long getSequenceNr() {
      return sequenceNr_;
    }

    // optional int64 timestamp = 2;
    public static final int TIMESTAMP_FIELD_NUMBER = 2;
    private long timestamp_;
    /**
     * <code>optional int64 timestamp = 2;</code>
     *
     * <pre>
     * Time of this scan in milliseconds
     * </pre>
     */
    public boolean hasTimestamp() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 timestamp = 2;</code>
     *
     * <pre>
     * Time of this scan in milliseconds
     * </pre>
     */
    public long getTimestamp() {
      return timestamp_;
    }

    // optional int32 last_dot_nr = 3;
    public static final int LAST_DOT_NR_FIELD_NUMBER = 3;
    private int lastDotNr_;
    /**
     * <code>optional int32 last_dot_nr = 3;</code>
     *
     * <pre>
     * Location where the measurment was taken
     * </pre>
     */
    public boolean hasLastDotNr() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 last_dot_nr = 3;</code>
     *
     * <pre>
     * Location where the measurment was taken
     * </pre>
     */
    public int getLastDotNr() {
      return lastDotNr_;
    }

    // optional .perfloc.SensorReading.SensorEvent sensor_event = 4;
    public static final int SENSOR_EVENT_FIELD_NUMBER = 4;
    private gov.nist.perfloc.SensorData.SensorReading.SensorEvent sensorEvent_;
    /**
     * <code>optional .perfloc.SensorReading.SensorEvent sensor_event = 4;</code>
     *
     * <pre>
     * Format defining a sensor reading
     * </pre>
     */
    public boolean hasSensorEvent() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .perfloc.SensorReading.SensorEvent sensor_event = 4;</code>
     *
     * <pre>
     * Format defining a sensor reading
     * </pre>
     */
    public gov.nist.perfloc.SensorData.SensorReading.SensorEvent getSensorEvent() {
      return sensorEvent_;
    }
    /**
     * <code>optional .perfloc.SensorReading.SensorEvent sensor_event = 4;</code>
     *
     * <pre>
     * Format defining a sensor reading
     * </pre>
     */
    public gov.nist.perfloc.SensorData.SensorReading.SensorEventOrBuilder getSensorEventOrBuilder() {
      return sensorEvent_;
    }

    private void initFields() {
      sequenceNr_ = 0L;
      timestamp_ = 0L;
      lastDotNr_ = 0;
      sensorEvent_ = gov.nist.perfloc.SensorData.SensorReading.SensorEvent.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, sequenceNr_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, timestamp_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, lastDotNr_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, sensorEvent_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, sequenceNr_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, timestamp_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, lastDotNr_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, sensorEvent_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static gov.nist.perfloc.SensorData.SensorReading parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gov.nist.perfloc.SensorData.SensorReading parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gov.nist.perfloc.SensorData.SensorReading parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gov.nist.perfloc.SensorData.SensorReading parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gov.nist.perfloc.SensorData.SensorReading parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gov.nist.perfloc.SensorData.SensorReading parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static gov.nist.perfloc.SensorData.SensorReading parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static gov.nist.perfloc.SensorData.SensorReading parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static gov.nist.perfloc.SensorData.SensorReading parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gov.nist.perfloc.SensorData.SensorReading parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(gov.nist.perfloc.SensorData.SensorReading prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perfloc.SensorReading}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements gov.nist.perfloc.SensorData.SensorReadingOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gov.nist.perfloc.SensorData.internal_static_perfloc_SensorReading_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gov.nist.perfloc.SensorData.internal_static_perfloc_SensorReading_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gov.nist.perfloc.SensorData.SensorReading.class, gov.nist.perfloc.SensorData.SensorReading.Builder.class);
      }

      // Construct using gov.nist.perfloc.SensorData.SensorReading.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSensorEventFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        sequenceNr_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        timestamp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        lastDotNr_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (sensorEventBuilder_ == null) {
          sensorEvent_ = gov.nist.perfloc.SensorData.SensorReading.SensorEvent.getDefaultInstance();
        } else {
          sensorEventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gov.nist.perfloc.SensorData.internal_static_perfloc_SensorReading_descriptor;
      }

      public gov.nist.perfloc.SensorData.SensorReading getDefaultInstanceForType() {
        return gov.nist.perfloc.SensorData.SensorReading.getDefaultInstance();
      }

      public gov.nist.perfloc.SensorData.SensorReading build() {
        gov.nist.perfloc.SensorData.SensorReading result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gov.nist.perfloc.SensorData.SensorReading buildPartial() {
        gov.nist.perfloc.SensorData.SensorReading result = new gov.nist.perfloc.SensorData.SensorReading(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.sequenceNr_ = sequenceNr_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.timestamp_ = timestamp_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.lastDotNr_ = lastDotNr_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (sensorEventBuilder_ == null) {
          result.sensorEvent_ = sensorEvent_;
        } else {
          result.sensorEvent_ = sensorEventBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gov.nist.perfloc.SensorData.SensorReading) {
          return mergeFrom((gov.nist.perfloc.SensorData.SensorReading)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gov.nist.perfloc.SensorData.SensorReading other) {
        if (other == gov.nist.perfloc.SensorData.SensorReading.getDefaultInstance()) return this;
        if (other.hasSequenceNr()) {
          setSequenceNr(other.getSequenceNr());
        }
        if (other.hasTimestamp()) {
          setTimestamp(other.getTimestamp());
        }
        if (other.hasLastDotNr()) {
          setLastDotNr(other.getLastDotNr());
        }
        if (other.hasSensorEvent()) {
          mergeSensorEvent(other.getSensorEvent());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gov.nist.perfloc.SensorData.SensorReading parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gov.nist.perfloc.SensorData.SensorReading) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int64 sequence_nr = 1;
      private long sequenceNr_ ;
      /**
       * <code>optional int64 sequence_nr = 1;</code>
       *
       * <pre>
       * Sequence number of a reading
       * </pre>
       */
      public boolean hasSequenceNr() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int64 sequence_nr = 1;</code>
       *
       * <pre>
       * Sequence number of a reading
       * </pre>
       */
      public long getSequenceNr() {
        return sequenceNr_;
      }
      /**
       * <code>optional int64 sequence_nr = 1;</code>
       *
       * <pre>
       * Sequence number of a reading
       * </pre>
       */
      public Builder setSequenceNr(long value) {
        bitField0_ |= 0x00000001;
        sequenceNr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 sequence_nr = 1;</code>
       *
       * <pre>
       * Sequence number of a reading
       * </pre>
       */
      public Builder clearSequenceNr() {
        bitField0_ = (bitField0_ & ~0x00000001);
        sequenceNr_ = 0L;
        onChanged();
        return this;
      }

      // optional int64 timestamp = 2;
      private long timestamp_ ;
      /**
       * <code>optional int64 timestamp = 2;</code>
       *
       * <pre>
       * Time of this scan in milliseconds
       * </pre>
       */
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 timestamp = 2;</code>
       *
       * <pre>
       * Time of this scan in milliseconds
       * </pre>
       */
      public long getTimestamp() {
        return timestamp_;
      }
      /**
       * <code>optional int64 timestamp = 2;</code>
       *
       * <pre>
       * Time of this scan in milliseconds
       * </pre>
       */
      public Builder setTimestamp(long value) {
        bitField0_ |= 0x00000002;
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 timestamp = 2;</code>
       *
       * <pre>
       * Time of this scan in milliseconds
       * </pre>
       */
      public Builder clearTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000002);
        timestamp_ = 0L;
        onChanged();
        return this;
      }

      // optional int32 last_dot_nr = 3;
      private int lastDotNr_ ;
      /**
       * <code>optional int32 last_dot_nr = 3;</code>
       *
       * <pre>
       * Location where the measurment was taken
       * </pre>
       */
      public boolean hasLastDotNr() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 last_dot_nr = 3;</code>
       *
       * <pre>
       * Location where the measurment was taken
       * </pre>
       */
      public int getLastDotNr() {
        return lastDotNr_;
      }
      /**
       * <code>optional int32 last_dot_nr = 3;</code>
       *
       * <pre>
       * Location where the measurment was taken
       * </pre>
       */
      public Builder setLastDotNr(int value) {
        bitField0_ |= 0x00000004;
        lastDotNr_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 last_dot_nr = 3;</code>
       *
       * <pre>
       * Location where the measurment was taken
       * </pre>
       */
      public Builder clearLastDotNr() {
        bitField0_ = (bitField0_ & ~0x00000004);
        lastDotNr_ = 0;
        onChanged();
        return this;
      }

      // optional .perfloc.SensorReading.SensorEvent sensor_event = 4;
      private gov.nist.perfloc.SensorData.SensorReading.SensorEvent sensorEvent_ = gov.nist.perfloc.SensorData.SensorReading.SensorEvent.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          gov.nist.perfloc.SensorData.SensorReading.SensorEvent, gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Builder, gov.nist.perfloc.SensorData.SensorReading.SensorEventOrBuilder> sensorEventBuilder_;
      /**
       * <code>optional .perfloc.SensorReading.SensorEvent sensor_event = 4;</code>
       *
       * <pre>
       * Format defining a sensor reading
       * </pre>
       */
      public boolean hasSensorEvent() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .perfloc.SensorReading.SensorEvent sensor_event = 4;</code>
       *
       * <pre>
       * Format defining a sensor reading
       * </pre>
       */
      public gov.nist.perfloc.SensorData.SensorReading.SensorEvent getSensorEvent() {
        if (sensorEventBuilder_ == null) {
          return sensorEvent_;
        } else {
          return sensorEventBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfloc.SensorReading.SensorEvent sensor_event = 4;</code>
       *
       * <pre>
       * Format defining a sensor reading
       * </pre>
       */
      public Builder setSensorEvent(gov.nist.perfloc.SensorData.SensorReading.SensorEvent value) {
        if (sensorEventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sensorEvent_ = value;
          onChanged();
        } else {
          sensorEventBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .perfloc.SensorReading.SensorEvent sensor_event = 4;</code>
       *
       * <pre>
       * Format defining a sensor reading
       * </pre>
       */
      public Builder setSensorEvent(
          gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Builder builderForValue) {
        if (sensorEventBuilder_ == null) {
          sensorEvent_ = builderForValue.build();
          onChanged();
        } else {
          sensorEventBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .perfloc.SensorReading.SensorEvent sensor_event = 4;</code>
       *
       * <pre>
       * Format defining a sensor reading
       * </pre>
       */
      public Builder mergeSensorEvent(gov.nist.perfloc.SensorData.SensorReading.SensorEvent value) {
        if (sensorEventBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              sensorEvent_ != gov.nist.perfloc.SensorData.SensorReading.SensorEvent.getDefaultInstance()) {
            sensorEvent_ =
              gov.nist.perfloc.SensorData.SensorReading.SensorEvent.newBuilder(sensorEvent_).mergeFrom(value).buildPartial();
          } else {
            sensorEvent_ = value;
          }
          onChanged();
        } else {
          sensorEventBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .perfloc.SensorReading.SensorEvent sensor_event = 4;</code>
       *
       * <pre>
       * Format defining a sensor reading
       * </pre>
       */
      public Builder clearSensorEvent() {
        if (sensorEventBuilder_ == null) {
          sensorEvent_ = gov.nist.perfloc.SensorData.SensorReading.SensorEvent.getDefaultInstance();
          onChanged();
        } else {
          sensorEventBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .perfloc.SensorReading.SensorEvent sensor_event = 4;</code>
       *
       * <pre>
       * Format defining a sensor reading
       * </pre>
       */
      public gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Builder getSensorEventBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getSensorEventFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfloc.SensorReading.SensorEvent sensor_event = 4;</code>
       *
       * <pre>
       * Format defining a sensor reading
       * </pre>
       */
      public gov.nist.perfloc.SensorData.SensorReading.SensorEventOrBuilder getSensorEventOrBuilder() {
        if (sensorEventBuilder_ != null) {
          return sensorEventBuilder_.getMessageOrBuilder();
        } else {
          return sensorEvent_;
        }
      }
      /**
       * <code>optional .perfloc.SensorReading.SensorEvent sensor_event = 4;</code>
       *
       * <pre>
       * Format defining a sensor reading
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          gov.nist.perfloc.SensorData.SensorReading.SensorEvent, gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Builder, gov.nist.perfloc.SensorData.SensorReading.SensorEventOrBuilder> 
          getSensorEventFieldBuilder() {
        if (sensorEventBuilder_ == null) {
          sensorEventBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              gov.nist.perfloc.SensorData.SensorReading.SensorEvent, gov.nist.perfloc.SensorData.SensorReading.SensorEvent.Builder, gov.nist.perfloc.SensorData.SensorReading.SensorEventOrBuilder>(
                  sensorEvent_,
                  getParentForChildren(),
                  isClean());
          sensorEvent_ = null;
        }
        return sensorEventBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:perfloc.SensorReading)
    }

    static {
      defaultInstance = new SensorReading(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:perfloc.SensorReading)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_perfloc_SensorReading_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfloc_SensorReading_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_perfloc_SensorReading_SensorEvent_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfloc_SensorReading_SensorEvent_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_perfloc_SensorReading_SensorEvent_SensorValues_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfloc_SensorReading_SensorEvent_SensorValues_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_perfloc_SensorReading_SensorEvent_Sensor_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfloc_SensorReading_SensorEvent_Sensor_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021sensor_data.proto\022\007perfloc\"\346\003\n\rSensorR" +
      "eading\022\023\n\013sequence_nr\030\001 \001(\003\022\021\n\ttimestamp" +
      "\030\002 \001(\003\022\023\n\013last_dot_nr\030\003 \001(\005\0228\n\014sensor_ev" +
      "ent\030\004 \001(\0132\".perfloc.SensorReading.Sensor" +
      "Event\032\335\002\n\013SensorEvent\022\023\n\013sensor_type\030\001 \001" +
      "(\005\022\021\n\ttimestamp\030\002 \001(\003\022\020\n\010accuracy\030\003 \001(\005\022" +
      "?\n\006values\030\004 \001(\0132/.perfloc.SensorReading." +
      "SensorEvent.SensorValues\032!\n\014SensorValues" +
      "\022\021\n\005value\030\001 \003(\002B\002\020\001\032\257\001\n\006Sensor\022\014\n\004type\030\001" +
      " \001(\005\022\023\n\013string_type\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022",
      "\030\n\020is_wakeup_sensor\030\004 \001(\010\022\016\n\006vendor\030\005 \001(" +
      "\t\022\017\n\007version\030\006 \001(\005\022\022\n\nresolution\030\007 \001(\002\022\026" +
      "\n\016reporting_mode\030\010 \001(\005\022\r\n\005power\030\t \001(\002B\022\n" +
      "\020gov.nist.perfloc"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_perfloc_SensorReading_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_perfloc_SensorReading_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_perfloc_SensorReading_descriptor,
              new java.lang.String[] { "SequenceNr", "Timestamp", "LastDotNr", "SensorEvent", });
          internal_static_perfloc_SensorReading_SensorEvent_descriptor =
            internal_static_perfloc_SensorReading_descriptor.getNestedTypes().get(0);
          internal_static_perfloc_SensorReading_SensorEvent_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_perfloc_SensorReading_SensorEvent_descriptor,
              new java.lang.String[] { "SensorType", "Timestamp", "Accuracy", "Values", });
          internal_static_perfloc_SensorReading_SensorEvent_SensorValues_descriptor =
            internal_static_perfloc_SensorReading_SensorEvent_descriptor.getNestedTypes().get(0);
          internal_static_perfloc_SensorReading_SensorEvent_SensorValues_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_perfloc_SensorReading_SensorEvent_SensorValues_descriptor,
              new java.lang.String[] { "Value", });
          internal_static_perfloc_SensorReading_SensorEvent_Sensor_descriptor =
            internal_static_perfloc_SensorReading_SensorEvent_descriptor.getNestedTypes().get(1);
          internal_static_perfloc_SensorReading_SensorEvent_Sensor_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_perfloc_SensorReading_SensorEvent_Sensor_descriptor,
              new java.lang.String[] { "Type", "StringType", "Name", "IsWakeupSensor", "Vendor", "Version", "Resolution", "ReportingMode", "Power", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
