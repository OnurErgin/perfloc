// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta_data.proto

package gov.nist.perfloc;

public final class MetaData {
  private MetaData() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface MetadataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:perfloc.Metadata)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 measurement_id = 1;</code>
     *
     * <pre>
     * Identifier of the metadata
     * </pre>
     */
    boolean hasMeasurementId();
    /**
     * <code>optional int32 measurement_id = 1;</code>
     *
     * <pre>
     * Identifier of the metadata
     * </pre>
     */
    int getMeasurementId();

    /**
     * <code>optional int64 time_created = 2;</code>
     *
     * <pre>
     * Creation date - milliseconds from 1.1.1970
     * </pre>
     */
    boolean hasTimeCreated();
    /**
     * <code>optional int64 time_created = 2;</code>
     *
     * <pre>
     * Creation date - milliseconds from 1.1.1970
     * </pre>
     */
    long getTimeCreated();

    /**
     * <code>optional string license = 3;</code>
     *
     * <pre>
     * License type
     * </pre>
     */
    boolean hasLicense();
    /**
     * <code>optional string license = 3;</code>
     *
     * <pre>
     * License type
     * </pre>
     */
    java.lang.String getLicense();
    /**
     * <code>optional string license = 3;</code>
     *
     * <pre>
     * License type
     * </pre>
     */
    com.google.protobuf.ByteString
        getLicenseBytes();

    /**
     * <code>optional double experiment_duration = 4;</code>
     *
     * <pre>
     * Experiment duration
     * </pre>
     */
    boolean hasExperimentDuration();
    /**
     * <code>optional double experiment_duration = 4;</code>
     *
     * <pre>
     * Experiment duration
     * </pre>
     */
    double getExperimentDuration();

    /**
     * <code>optional string experiment_description = 5;</code>
     *
     * <pre>
     * Description of a data collection procedure
     * </pre>
     */
    boolean hasExperimentDescription();
    /**
     * <code>optional string experiment_description = 5;</code>
     *
     * <pre>
     * Description of a data collection procedure
     * </pre>
     */
    java.lang.String getExperimentDescription();
    /**
     * <code>optional string experiment_description = 5;</code>
     *
     * <pre>
     * Description of a data collection procedure
     * </pre>
     */
    com.google.protobuf.ByteString
        getExperimentDescriptionBytes();

    /**
     * <code>optional string environment_description = 6;</code>
     *
     * <pre>
     * Environment description
     * </pre>
     */
    boolean hasEnvironmentDescription();
    /**
     * <code>optional string environment_description = 6;</code>
     *
     * <pre>
     * Environment description
     * </pre>
     */
    java.lang.String getEnvironmentDescription();
    /**
     * <code>optional string environment_description = 6;</code>
     *
     * <pre>
     * Environment description
     * </pre>
     */
    com.google.protobuf.ByteString
        getEnvironmentDescriptionBytes();

    /**
     * <code>optional string interference_description = 7;</code>
     *
     * <pre>
     * Interference description ??? DO WE NEED THIS?  
     * </pre>
     */
    boolean hasInterferenceDescription();
    /**
     * <code>optional string interference_description = 7;</code>
     *
     * <pre>
     * Interference description ??? DO WE NEED THIS?  
     * </pre>
     */
    java.lang.String getInterferenceDescription();
    /**
     * <code>optional string interference_description = 7;</code>
     *
     * <pre>
     * Interference description ??? DO WE NEED THIS?  
     * </pre>
     */
    com.google.protobuf.ByteString
        getInterferenceDescriptionBytes();

    /**
     * <code>optional string additional_info = 8;</code>
     *
     * <pre>
     * Additional information      
     * </pre>
     */
    boolean hasAdditionalInfo();
    /**
     * <code>optional string additional_info = 8;</code>
     *
     * <pre>
     * Additional information      
     * </pre>
     */
    java.lang.String getAdditionalInfo();
    /**
     * <code>optional string additional_info = 8;</code>
     *
     * <pre>
     * Additional information      
     * </pre>
     */
    com.google.protobuf.ByteString
        getAdditionalInfoBytes();

    /**
     * <code>optional .perfloc.Metadata.DeviceDescription device = 9;</code>
     *
     * <pre>
     * Description of a experimentation scenario
     * </pre>
     */
    boolean hasDevice();
    /**
     * <code>optional .perfloc.Metadata.DeviceDescription device = 9;</code>
     *
     * <pre>
     * Description of a experimentation scenario
     * </pre>
     */
    gov.nist.perfloc.MetaData.Metadata.DeviceDescription getDevice();
    /**
     * <code>optional .perfloc.Metadata.DeviceDescription device = 9;</code>
     *
     * <pre>
     * Description of a experimentation scenario
     * </pre>
     */
    gov.nist.perfloc.MetaData.Metadata.DeviceDescriptionOrBuilder getDeviceOrBuilder();

    /**
     * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
     *
     * <pre>
     * Description of each sensor used for generating sensor readings 
     * </pre>
     */
    java.util.List<gov.nist.perfloc.MetaData.Metadata.Sensor> 
        getSensorList();
    /**
     * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
     *
     * <pre>
     * Description of each sensor used for generating sensor readings 
     * </pre>
     */
    gov.nist.perfloc.MetaData.Metadata.Sensor getSensor(int index);
    /**
     * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
     *
     * <pre>
     * Description of each sensor used for generating sensor readings 
     * </pre>
     */
    int getSensorCount();
    /**
     * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
     *
     * <pre>
     * Description of each sensor used for generating sensor readings 
     * </pre>
     */
    java.util.List<? extends gov.nist.perfloc.MetaData.Metadata.SensorOrBuilder> 
        getSensorOrBuilderList();
    /**
     * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
     *
     * <pre>
     * Description of each sensor used for generating sensor readings 
     * </pre>
     */
    gov.nist.perfloc.MetaData.Metadata.SensorOrBuilder getSensorOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code perfloc.Metadata}
   */
  public static final class Metadata extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:perfloc.Metadata)
      MetadataOrBuilder {
    // Use Metadata.newBuilder() to construct.
    private Metadata(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Metadata(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Metadata defaultInstance;
    public static Metadata getDefaultInstance() {
      return defaultInstance;
    }

    public Metadata getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Metadata(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              measurementId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              timeCreated_ = input.readInt64();
              break;
            }
            case 26: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000004;
              license_ = bs;
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              experimentDuration_ = input.readDouble();
              break;
            }
            case 42: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000010;
              experimentDescription_ = bs;
              break;
            }
            case 50: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000020;
              environmentDescription_ = bs;
              break;
            }
            case 58: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000040;
              interferenceDescription_ = bs;
              break;
            }
            case 66: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000080;
              additionalInfo_ = bs;
              break;
            }
            case 74: {
              gov.nist.perfloc.MetaData.Metadata.DeviceDescription.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = device_.toBuilder();
              }
              device_ = input.readMessage(gov.nist.perfloc.MetaData.Metadata.DeviceDescription.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(device_);
                device_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 82: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                sensor_ = new java.util.ArrayList<gov.nist.perfloc.MetaData.Metadata.Sensor>();
                mutable_bitField0_ |= 0x00000200;
              }
              sensor_.add(input.readMessage(gov.nist.perfloc.MetaData.Metadata.Sensor.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          sensor_ = java.util.Collections.unmodifiableList(sensor_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gov.nist.perfloc.MetaData.internal_static_perfloc_Metadata_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gov.nist.perfloc.MetaData.internal_static_perfloc_Metadata_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gov.nist.perfloc.MetaData.Metadata.class, gov.nist.perfloc.MetaData.Metadata.Builder.class);
    }

    public static com.google.protobuf.Parser<Metadata> PARSER =
        new com.google.protobuf.AbstractParser<Metadata>() {
      public Metadata parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Metadata(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Metadata> getParserForType() {
      return PARSER;
    }

    public interface DeviceDescriptionOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfloc.Metadata.DeviceDescription)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional string board = 1;</code>
       *
       * <pre>
       * The name of the underlying board, like "goldfish".
       * </pre>
       */
      boolean hasBoard();
      /**
       * <code>optional string board = 1;</code>
       *
       * <pre>
       * The name of the underlying board, like "goldfish".
       * </pre>
       */
      java.lang.String getBoard();
      /**
       * <code>optional string board = 1;</code>
       *
       * <pre>
       * The name of the underlying board, like "goldfish".
       * </pre>
       */
      com.google.protobuf.ByteString
          getBoardBytes();

      /**
       * <code>optional string brand = 2;</code>
       *
       * <pre>
       * The consumer-visible brand with which the product/hardware will be associated, if any.
       * </pre>
       */
      boolean hasBrand();
      /**
       * <code>optional string brand = 2;</code>
       *
       * <pre>
       * The consumer-visible brand with which the product/hardware will be associated, if any.
       * </pre>
       */
      java.lang.String getBrand();
      /**
       * <code>optional string brand = 2;</code>
       *
       * <pre>
       * The consumer-visible brand with which the product/hardware will be associated, if any.
       * </pre>
       */
      com.google.protobuf.ByteString
          getBrandBytes();

      /**
       * <code>optional string device = 3;</code>
       *
       * <pre>
       * The name of the industrial design.
       * </pre>
       */
      boolean hasDevice();
      /**
       * <code>optional string device = 3;</code>
       *
       * <pre>
       * The name of the industrial design.
       * </pre>
       */
      java.lang.String getDevice();
      /**
       * <code>optional string device = 3;</code>
       *
       * <pre>
       * The name of the industrial design.
       * </pre>
       */
      com.google.protobuf.ByteString
          getDeviceBytes();

      /**
       * <code>optional string display = 4;</code>
       *
       * <pre>
       * A build ID string meant for displaying to the user
       * </pre>
       */
      boolean hasDisplay();
      /**
       * <code>optional string display = 4;</code>
       *
       * <pre>
       * A build ID string meant for displaying to the user
       * </pre>
       */
      java.lang.String getDisplay();
      /**
       * <code>optional string display = 4;</code>
       *
       * <pre>
       * A build ID string meant for displaying to the user
       * </pre>
       */
      com.google.protobuf.ByteString
          getDisplayBytes();

      /**
       * <code>optional string fingerprint = 5;</code>
       *
       * <pre>
       * A string that uniquely identifies this build. Do not attempt to parse this value.
       * </pre>
       */
      boolean hasFingerprint();
      /**
       * <code>optional string fingerprint = 5;</code>
       *
       * <pre>
       * A string that uniquely identifies this build. Do not attempt to parse this value.
       * </pre>
       */
      java.lang.String getFingerprint();
      /**
       * <code>optional string fingerprint = 5;</code>
       *
       * <pre>
       * A string that uniquely identifies this build. Do not attempt to parse this value.
       * </pre>
       */
      com.google.protobuf.ByteString
          getFingerprintBytes();

      /**
       * <code>optional string hardware = 6;</code>
       *
       * <pre>
       * The name of the hardware (from the kernel command line or /proc).
       * </pre>
       */
      boolean hasHardware();
      /**
       * <code>optional string hardware = 6;</code>
       *
       * <pre>
       * The name of the hardware (from the kernel command line or /proc).
       * </pre>
       */
      java.lang.String getHardware();
      /**
       * <code>optional string hardware = 6;</code>
       *
       * <pre>
       * The name of the hardware (from the kernel command line or /proc).
       * </pre>
       */
      com.google.protobuf.ByteString
          getHardwareBytes();

      /**
       * <code>optional string id = 7;</code>
       *
       * <pre>
       * Either a changelist number, or a label like "M4-rc20".
       * </pre>
       */
      boolean hasId();
      /**
       * <code>optional string id = 7;</code>
       *
       * <pre>
       * Either a changelist number, or a label like "M4-rc20".
       * </pre>
       */
      java.lang.String getId();
      /**
       * <code>optional string id = 7;</code>
       *
       * <pre>
       * Either a changelist number, or a label like "M4-rc20".
       * </pre>
       */
      com.google.protobuf.ByteString
          getIdBytes();

      /**
       * <code>optional string manufacturer = 8;</code>
       *
       * <pre>
       * The manufacturer of the product/hardware
       * </pre>
       */
      boolean hasManufacturer();
      /**
       * <code>optional string manufacturer = 8;</code>
       *
       * <pre>
       * The manufacturer of the product/hardware
       * </pre>
       */
      java.lang.String getManufacturer();
      /**
       * <code>optional string manufacturer = 8;</code>
       *
       * <pre>
       * The manufacturer of the product/hardware
       * </pre>
       */
      com.google.protobuf.ByteString
          getManufacturerBytes();

      /**
       * <code>optional string model = 9;</code>
       *
       * <pre>
       * The end-user-visible name for the end product.
       * </pre>
       */
      boolean hasModel();
      /**
       * <code>optional string model = 9;</code>
       *
       * <pre>
       * The end-user-visible name for the end product.
       * </pre>
       */
      java.lang.String getModel();
      /**
       * <code>optional string model = 9;</code>
       *
       * <pre>
       * The end-user-visible name for the end product.
       * </pre>
       */
      com.google.protobuf.ByteString
          getModelBytes();

      /**
       * <code>optional string product = 10;</code>
       *
       * <pre>
       * The name of the overall product.
       * </pre>
       */
      boolean hasProduct();
      /**
       * <code>optional string product = 10;</code>
       *
       * <pre>
       * The name of the overall product.
       * </pre>
       */
      java.lang.String getProduct();
      /**
       * <code>optional string product = 10;</code>
       *
       * <pre>
       * The name of the overall product.
       * </pre>
       */
      com.google.protobuf.ByteString
          getProductBytes();

      /**
       * <code>optional string serial = 11;</code>
       *
       * <pre>
       * A hardware serial number, if available. Alphanumeric only, case-insensitive.
       * </pre>
       */
      boolean hasSerial();
      /**
       * <code>optional string serial = 11;</code>
       *
       * <pre>
       * A hardware serial number, if available. Alphanumeric only, case-insensitive.
       * </pre>
       */
      java.lang.String getSerial();
      /**
       * <code>optional string serial = 11;</code>
       *
       * <pre>
       * A hardware serial number, if available. Alphanumeric only, case-insensitive.
       * </pre>
       */
      com.google.protobuf.ByteString
          getSerialBytes();

      /**
       * <code>optional string radio_version = 12;</code>
       *
       * <pre>
       * the version string for the radio firmware. May be null (if, for instance, the radio is not currently on).
       * </pre>
       */
      boolean hasRadioVersion();
      /**
       * <code>optional string radio_version = 12;</code>
       *
       * <pre>
       * the version string for the radio firmware. May be null (if, for instance, the radio is not currently on).
       * </pre>
       */
      java.lang.String getRadioVersion();
      /**
       * <code>optional string radio_version = 12;</code>
       *
       * <pre>
       * the version string for the radio firmware. May be null (if, for instance, the radio is not currently on).
       * </pre>
       */
      com.google.protobuf.ByteString
          getRadioVersionBytes();
    }
    /**
     * Protobuf type {@code perfloc.Metadata.DeviceDescription}
     */
    public static final class DeviceDescription extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:perfloc.Metadata.DeviceDescription)
        DeviceDescriptionOrBuilder {
      // Use DeviceDescription.newBuilder() to construct.
      private DeviceDescription(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private DeviceDescription(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final DeviceDescription defaultInstance;
      public static DeviceDescription getDefaultInstance() {
        return defaultInstance;
      }

      public DeviceDescription getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private DeviceDescription(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000001;
                board_ = bs;
                break;
              }
              case 18: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000002;
                brand_ = bs;
                break;
              }
              case 26: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000004;
                device_ = bs;
                break;
              }
              case 34: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000008;
                display_ = bs;
                break;
              }
              case 42: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000010;
                fingerprint_ = bs;
                break;
              }
              case 50: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000020;
                hardware_ = bs;
                break;
              }
              case 58: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000040;
                id_ = bs;
                break;
              }
              case 66: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000080;
                manufacturer_ = bs;
                break;
              }
              case 74: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000100;
                model_ = bs;
                break;
              }
              case 82: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000200;
                product_ = bs;
                break;
              }
              case 90: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000400;
                serial_ = bs;
                break;
              }
              case 98: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000800;
                radioVersion_ = bs;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gov.nist.perfloc.MetaData.internal_static_perfloc_Metadata_DeviceDescription_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gov.nist.perfloc.MetaData.internal_static_perfloc_Metadata_DeviceDescription_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gov.nist.perfloc.MetaData.Metadata.DeviceDescription.class, gov.nist.perfloc.MetaData.Metadata.DeviceDescription.Builder.class);
      }

      public static com.google.protobuf.Parser<DeviceDescription> PARSER =
          new com.google.protobuf.AbstractParser<DeviceDescription>() {
        public DeviceDescription parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new DeviceDescription(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<DeviceDescription> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      public static final int BOARD_FIELD_NUMBER = 1;
      private java.lang.Object board_;
      /**
       * <code>optional string board = 1;</code>
       *
       * <pre>
       * The name of the underlying board, like "goldfish".
       * </pre>
       */
      public boolean hasBoard() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional string board = 1;</code>
       *
       * <pre>
       * The name of the underlying board, like "goldfish".
       * </pre>
       */
      public java.lang.String getBoard() {
        java.lang.Object ref = board_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            board_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string board = 1;</code>
       *
       * <pre>
       * The name of the underlying board, like "goldfish".
       * </pre>
       */
      public com.google.protobuf.ByteString
          getBoardBytes() {
        java.lang.Object ref = board_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          board_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int BRAND_FIELD_NUMBER = 2;
      private java.lang.Object brand_;
      /**
       * <code>optional string brand = 2;</code>
       *
       * <pre>
       * The consumer-visible brand with which the product/hardware will be associated, if any.
       * </pre>
       */
      public boolean hasBrand() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string brand = 2;</code>
       *
       * <pre>
       * The consumer-visible brand with which the product/hardware will be associated, if any.
       * </pre>
       */
      public java.lang.String getBrand() {
        java.lang.Object ref = brand_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            brand_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string brand = 2;</code>
       *
       * <pre>
       * The consumer-visible brand with which the product/hardware will be associated, if any.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getBrandBytes() {
        java.lang.Object ref = brand_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          brand_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int DEVICE_FIELD_NUMBER = 3;
      private java.lang.Object device_;
      /**
       * <code>optional string device = 3;</code>
       *
       * <pre>
       * The name of the industrial design.
       * </pre>
       */
      public boolean hasDevice() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string device = 3;</code>
       *
       * <pre>
       * The name of the industrial design.
       * </pre>
       */
      public java.lang.String getDevice() {
        java.lang.Object ref = device_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            device_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string device = 3;</code>
       *
       * <pre>
       * The name of the industrial design.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDeviceBytes() {
        java.lang.Object ref = device_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          device_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int DISPLAY_FIELD_NUMBER = 4;
      private java.lang.Object display_;
      /**
       * <code>optional string display = 4;</code>
       *
       * <pre>
       * A build ID string meant for displaying to the user
       * </pre>
       */
      public boolean hasDisplay() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string display = 4;</code>
       *
       * <pre>
       * A build ID string meant for displaying to the user
       * </pre>
       */
      public java.lang.String getDisplay() {
        java.lang.Object ref = display_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            display_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string display = 4;</code>
       *
       * <pre>
       * A build ID string meant for displaying to the user
       * </pre>
       */
      public com.google.protobuf.ByteString
          getDisplayBytes() {
        java.lang.Object ref = display_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          display_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int FINGERPRINT_FIELD_NUMBER = 5;
      private java.lang.Object fingerprint_;
      /**
       * <code>optional string fingerprint = 5;</code>
       *
       * <pre>
       * A string that uniquely identifies this build. Do not attempt to parse this value.
       * </pre>
       */
      public boolean hasFingerprint() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string fingerprint = 5;</code>
       *
       * <pre>
       * A string that uniquely identifies this build. Do not attempt to parse this value.
       * </pre>
       */
      public java.lang.String getFingerprint() {
        java.lang.Object ref = fingerprint_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            fingerprint_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string fingerprint = 5;</code>
       *
       * <pre>
       * A string that uniquely identifies this build. Do not attempt to parse this value.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getFingerprintBytes() {
        java.lang.Object ref = fingerprint_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fingerprint_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int HARDWARE_FIELD_NUMBER = 6;
      private java.lang.Object hardware_;
      /**
       * <code>optional string hardware = 6;</code>
       *
       * <pre>
       * The name of the hardware (from the kernel command line or /proc).
       * </pre>
       */
      public boolean hasHardware() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional string hardware = 6;</code>
       *
       * <pre>
       * The name of the hardware (from the kernel command line or /proc).
       * </pre>
       */
      public java.lang.String getHardware() {
        java.lang.Object ref = hardware_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            hardware_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string hardware = 6;</code>
       *
       * <pre>
       * The name of the hardware (from the kernel command line or /proc).
       * </pre>
       */
      public com.google.protobuf.ByteString
          getHardwareBytes() {
        java.lang.Object ref = hardware_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          hardware_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int ID_FIELD_NUMBER = 7;
      private java.lang.Object id_;
      /**
       * <code>optional string id = 7;</code>
       *
       * <pre>
       * Either a changelist number, or a label like "M4-rc20".
       * </pre>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional string id = 7;</code>
       *
       * <pre>
       * Either a changelist number, or a label like "M4-rc20".
       * </pre>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            id_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string id = 7;</code>
       *
       * <pre>
       * Either a changelist number, or a label like "M4-rc20".
       * </pre>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int MANUFACTURER_FIELD_NUMBER = 8;
      private java.lang.Object manufacturer_;
      /**
       * <code>optional string manufacturer = 8;</code>
       *
       * <pre>
       * The manufacturer of the product/hardware
       * </pre>
       */
      public boolean hasManufacturer() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional string manufacturer = 8;</code>
       *
       * <pre>
       * The manufacturer of the product/hardware
       * </pre>
       */
      public java.lang.String getManufacturer() {
        java.lang.Object ref = manufacturer_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            manufacturer_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string manufacturer = 8;</code>
       *
       * <pre>
       * The manufacturer of the product/hardware
       * </pre>
       */
      public com.google.protobuf.ByteString
          getManufacturerBytes() {
        java.lang.Object ref = manufacturer_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          manufacturer_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int MODEL_FIELD_NUMBER = 9;
      private java.lang.Object model_;
      /**
       * <code>optional string model = 9;</code>
       *
       * <pre>
       * The end-user-visible name for the end product.
       * </pre>
       */
      public boolean hasModel() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional string model = 9;</code>
       *
       * <pre>
       * The end-user-visible name for the end product.
       * </pre>
       */
      public java.lang.String getModel() {
        java.lang.Object ref = model_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            model_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string model = 9;</code>
       *
       * <pre>
       * The end-user-visible name for the end product.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getModelBytes() {
        java.lang.Object ref = model_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          model_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int PRODUCT_FIELD_NUMBER = 10;
      private java.lang.Object product_;
      /**
       * <code>optional string product = 10;</code>
       *
       * <pre>
       * The name of the overall product.
       * </pre>
       */
      public boolean hasProduct() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional string product = 10;</code>
       *
       * <pre>
       * The name of the overall product.
       * </pre>
       */
      public java.lang.String getProduct() {
        java.lang.Object ref = product_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            product_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string product = 10;</code>
       *
       * <pre>
       * The name of the overall product.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getProductBytes() {
        java.lang.Object ref = product_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          product_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int SERIAL_FIELD_NUMBER = 11;
      private java.lang.Object serial_;
      /**
       * <code>optional string serial = 11;</code>
       *
       * <pre>
       * A hardware serial number, if available. Alphanumeric only, case-insensitive.
       * </pre>
       */
      public boolean hasSerial() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional string serial = 11;</code>
       *
       * <pre>
       * A hardware serial number, if available. Alphanumeric only, case-insensitive.
       * </pre>
       */
      public java.lang.String getSerial() {
        java.lang.Object ref = serial_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            serial_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string serial = 11;</code>
       *
       * <pre>
       * A hardware serial number, if available. Alphanumeric only, case-insensitive.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getSerialBytes() {
        java.lang.Object ref = serial_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          serial_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int RADIO_VERSION_FIELD_NUMBER = 12;
      private java.lang.Object radioVersion_;
      /**
       * <code>optional string radio_version = 12;</code>
       *
       * <pre>
       * the version string for the radio firmware. May be null (if, for instance, the radio is not currently on).
       * </pre>
       */
      public boolean hasRadioVersion() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional string radio_version = 12;</code>
       *
       * <pre>
       * the version string for the radio firmware. May be null (if, for instance, the radio is not currently on).
       * </pre>
       */
      public java.lang.String getRadioVersion() {
        java.lang.Object ref = radioVersion_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            radioVersion_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string radio_version = 12;</code>
       *
       * <pre>
       * the version string for the radio firmware. May be null (if, for instance, the radio is not currently on).
       * </pre>
       */
      public com.google.protobuf.ByteString
          getRadioVersionBytes() {
        java.lang.Object ref = radioVersion_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          radioVersion_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      private void initFields() {
        board_ = "";
        brand_ = "";
        device_ = "";
        display_ = "";
        fingerprint_ = "";
        hardware_ = "";
        id_ = "";
        manufacturer_ = "";
        model_ = "";
        product_ = "";
        serial_ = "";
        radioVersion_ = "";
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeBytes(1, getBoardBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBytes(2, getBrandBytes());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeBytes(3, getDeviceBytes());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeBytes(4, getDisplayBytes());
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeBytes(5, getFingerprintBytes());
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          output.writeBytes(6, getHardwareBytes());
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          output.writeBytes(7, getIdBytes());
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          output.writeBytes(8, getManufacturerBytes());
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          output.writeBytes(9, getModelBytes());
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          output.writeBytes(10, getProductBytes());
        }
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          output.writeBytes(11, getSerialBytes());
        }
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          output.writeBytes(12, getRadioVersionBytes());
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(1, getBoardBytes());
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(2, getBrandBytes());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(3, getDeviceBytes());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(4, getDisplayBytes());
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(5, getFingerprintBytes());
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(6, getHardwareBytes());
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(7, getIdBytes());
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(8, getManufacturerBytes());
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(9, getModelBytes());
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(10, getProductBytes());
        }
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(11, getSerialBytes());
        }
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(12, getRadioVersionBytes());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static gov.nist.perfloc.MetaData.Metadata.DeviceDescription parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static gov.nist.perfloc.MetaData.Metadata.DeviceDescription parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static gov.nist.perfloc.MetaData.Metadata.DeviceDescription parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static gov.nist.perfloc.MetaData.Metadata.DeviceDescription parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static gov.nist.perfloc.MetaData.Metadata.DeviceDescription parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static gov.nist.perfloc.MetaData.Metadata.DeviceDescription parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static gov.nist.perfloc.MetaData.Metadata.DeviceDescription parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static gov.nist.perfloc.MetaData.Metadata.DeviceDescription parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static gov.nist.perfloc.MetaData.Metadata.DeviceDescription parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static gov.nist.perfloc.MetaData.Metadata.DeviceDescription parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(gov.nist.perfloc.MetaData.Metadata.DeviceDescription prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code perfloc.Metadata.DeviceDescription}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfloc.Metadata.DeviceDescription)
          gov.nist.perfloc.MetaData.Metadata.DeviceDescriptionOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return gov.nist.perfloc.MetaData.internal_static_perfloc_Metadata_DeviceDescription_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return gov.nist.perfloc.MetaData.internal_static_perfloc_Metadata_DeviceDescription_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  gov.nist.perfloc.MetaData.Metadata.DeviceDescription.class, gov.nist.perfloc.MetaData.Metadata.DeviceDescription.Builder.class);
        }

        // Construct using gov.nist.perfloc.MetaData.Metadata.DeviceDescription.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          board_ = "";
          bitField0_ = (bitField0_ & ~0x00000001);
          brand_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          device_ = "";
          bitField0_ = (bitField0_ & ~0x00000004);
          display_ = "";
          bitField0_ = (bitField0_ & ~0x00000008);
          fingerprint_ = "";
          bitField0_ = (bitField0_ & ~0x00000010);
          hardware_ = "";
          bitField0_ = (bitField0_ & ~0x00000020);
          id_ = "";
          bitField0_ = (bitField0_ & ~0x00000040);
          manufacturer_ = "";
          bitField0_ = (bitField0_ & ~0x00000080);
          model_ = "";
          bitField0_ = (bitField0_ & ~0x00000100);
          product_ = "";
          bitField0_ = (bitField0_ & ~0x00000200);
          serial_ = "";
          bitField0_ = (bitField0_ & ~0x00000400);
          radioVersion_ = "";
          bitField0_ = (bitField0_ & ~0x00000800);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return gov.nist.perfloc.MetaData.internal_static_perfloc_Metadata_DeviceDescription_descriptor;
        }

        public gov.nist.perfloc.MetaData.Metadata.DeviceDescription getDefaultInstanceForType() {
          return gov.nist.perfloc.MetaData.Metadata.DeviceDescription.getDefaultInstance();
        }

        public gov.nist.perfloc.MetaData.Metadata.DeviceDescription build() {
          gov.nist.perfloc.MetaData.Metadata.DeviceDescription result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public gov.nist.perfloc.MetaData.Metadata.DeviceDescription buildPartial() {
          gov.nist.perfloc.MetaData.Metadata.DeviceDescription result = new gov.nist.perfloc.MetaData.Metadata.DeviceDescription(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.board_ = board_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.brand_ = brand_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.device_ = device_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.display_ = display_;
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          result.fingerprint_ = fingerprint_;
          if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
            to_bitField0_ |= 0x00000020;
          }
          result.hardware_ = hardware_;
          if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
            to_bitField0_ |= 0x00000040;
          }
          result.id_ = id_;
          if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
            to_bitField0_ |= 0x00000080;
          }
          result.manufacturer_ = manufacturer_;
          if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
            to_bitField0_ |= 0x00000100;
          }
          result.model_ = model_;
          if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
            to_bitField0_ |= 0x00000200;
          }
          result.product_ = product_;
          if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
            to_bitField0_ |= 0x00000400;
          }
          result.serial_ = serial_;
          if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
            to_bitField0_ |= 0x00000800;
          }
          result.radioVersion_ = radioVersion_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof gov.nist.perfloc.MetaData.Metadata.DeviceDescription) {
            return mergeFrom((gov.nist.perfloc.MetaData.Metadata.DeviceDescription)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(gov.nist.perfloc.MetaData.Metadata.DeviceDescription other) {
          if (other == gov.nist.perfloc.MetaData.Metadata.DeviceDescription.getDefaultInstance()) return this;
          if (other.hasBoard()) {
            bitField0_ |= 0x00000001;
            board_ = other.board_;
            onChanged();
          }
          if (other.hasBrand()) {
            bitField0_ |= 0x00000002;
            brand_ = other.brand_;
            onChanged();
          }
          if (other.hasDevice()) {
            bitField0_ |= 0x00000004;
            device_ = other.device_;
            onChanged();
          }
          if (other.hasDisplay()) {
            bitField0_ |= 0x00000008;
            display_ = other.display_;
            onChanged();
          }
          if (other.hasFingerprint()) {
            bitField0_ |= 0x00000010;
            fingerprint_ = other.fingerprint_;
            onChanged();
          }
          if (other.hasHardware()) {
            bitField0_ |= 0x00000020;
            hardware_ = other.hardware_;
            onChanged();
          }
          if (other.hasId()) {
            bitField0_ |= 0x00000040;
            id_ = other.id_;
            onChanged();
          }
          if (other.hasManufacturer()) {
            bitField0_ |= 0x00000080;
            manufacturer_ = other.manufacturer_;
            onChanged();
          }
          if (other.hasModel()) {
            bitField0_ |= 0x00000100;
            model_ = other.model_;
            onChanged();
          }
          if (other.hasProduct()) {
            bitField0_ |= 0x00000200;
            product_ = other.product_;
            onChanged();
          }
          if (other.hasSerial()) {
            bitField0_ |= 0x00000400;
            serial_ = other.serial_;
            onChanged();
          }
          if (other.hasRadioVersion()) {
            bitField0_ |= 0x00000800;
            radioVersion_ = other.radioVersion_;
            onChanged();
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          gov.nist.perfloc.MetaData.Metadata.DeviceDescription parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (gov.nist.perfloc.MetaData.Metadata.DeviceDescription) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object board_ = "";
        /**
         * <code>optional string board = 1;</code>
         *
         * <pre>
         * The name of the underlying board, like "goldfish".
         * </pre>
         */
        public boolean hasBoard() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional string board = 1;</code>
         *
         * <pre>
         * The name of the underlying board, like "goldfish".
         * </pre>
         */
        public java.lang.String getBoard() {
          java.lang.Object ref = board_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              board_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string board = 1;</code>
         *
         * <pre>
         * The name of the underlying board, like "goldfish".
         * </pre>
         */
        public com.google.protobuf.ByteString
            getBoardBytes() {
          java.lang.Object ref = board_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            board_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string board = 1;</code>
         *
         * <pre>
         * The name of the underlying board, like "goldfish".
         * </pre>
         */
        public Builder setBoard(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          board_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string board = 1;</code>
         *
         * <pre>
         * The name of the underlying board, like "goldfish".
         * </pre>
         */
        public Builder clearBoard() {
          bitField0_ = (bitField0_ & ~0x00000001);
          board_ = getDefaultInstance().getBoard();
          onChanged();
          return this;
        }
        /**
         * <code>optional string board = 1;</code>
         *
         * <pre>
         * The name of the underlying board, like "goldfish".
         * </pre>
         */
        public Builder setBoardBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
          board_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object brand_ = "";
        /**
         * <code>optional string brand = 2;</code>
         *
         * <pre>
         * The consumer-visible brand with which the product/hardware will be associated, if any.
         * </pre>
         */
        public boolean hasBrand() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional string brand = 2;</code>
         *
         * <pre>
         * The consumer-visible brand with which the product/hardware will be associated, if any.
         * </pre>
         */
        public java.lang.String getBrand() {
          java.lang.Object ref = brand_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              brand_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string brand = 2;</code>
         *
         * <pre>
         * The consumer-visible brand with which the product/hardware will be associated, if any.
         * </pre>
         */
        public com.google.protobuf.ByteString
            getBrandBytes() {
          java.lang.Object ref = brand_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            brand_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string brand = 2;</code>
         *
         * <pre>
         * The consumer-visible brand with which the product/hardware will be associated, if any.
         * </pre>
         */
        public Builder setBrand(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          brand_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string brand = 2;</code>
         *
         * <pre>
         * The consumer-visible brand with which the product/hardware will be associated, if any.
         * </pre>
         */
        public Builder clearBrand() {
          bitField0_ = (bitField0_ & ~0x00000002);
          brand_ = getDefaultInstance().getBrand();
          onChanged();
          return this;
        }
        /**
         * <code>optional string brand = 2;</code>
         *
         * <pre>
         * The consumer-visible brand with which the product/hardware will be associated, if any.
         * </pre>
         */
        public Builder setBrandBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          brand_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object device_ = "";
        /**
         * <code>optional string device = 3;</code>
         *
         * <pre>
         * The name of the industrial design.
         * </pre>
         */
        public boolean hasDevice() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional string device = 3;</code>
         *
         * <pre>
         * The name of the industrial design.
         * </pre>
         */
        public java.lang.String getDevice() {
          java.lang.Object ref = device_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              device_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string device = 3;</code>
         *
         * <pre>
         * The name of the industrial design.
         * </pre>
         */
        public com.google.protobuf.ByteString
            getDeviceBytes() {
          java.lang.Object ref = device_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            device_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string device = 3;</code>
         *
         * <pre>
         * The name of the industrial design.
         * </pre>
         */
        public Builder setDevice(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          device_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string device = 3;</code>
         *
         * <pre>
         * The name of the industrial design.
         * </pre>
         */
        public Builder clearDevice() {
          bitField0_ = (bitField0_ & ~0x00000004);
          device_ = getDefaultInstance().getDevice();
          onChanged();
          return this;
        }
        /**
         * <code>optional string device = 3;</code>
         *
         * <pre>
         * The name of the industrial design.
         * </pre>
         */
        public Builder setDeviceBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          device_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object display_ = "";
        /**
         * <code>optional string display = 4;</code>
         *
         * <pre>
         * A build ID string meant for displaying to the user
         * </pre>
         */
        public boolean hasDisplay() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional string display = 4;</code>
         *
         * <pre>
         * A build ID string meant for displaying to the user
         * </pre>
         */
        public java.lang.String getDisplay() {
          java.lang.Object ref = display_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              display_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string display = 4;</code>
         *
         * <pre>
         * A build ID string meant for displaying to the user
         * </pre>
         */
        public com.google.protobuf.ByteString
            getDisplayBytes() {
          java.lang.Object ref = display_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            display_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string display = 4;</code>
         *
         * <pre>
         * A build ID string meant for displaying to the user
         * </pre>
         */
        public Builder setDisplay(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
          display_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string display = 4;</code>
         *
         * <pre>
         * A build ID string meant for displaying to the user
         * </pre>
         */
        public Builder clearDisplay() {
          bitField0_ = (bitField0_ & ~0x00000008);
          display_ = getDefaultInstance().getDisplay();
          onChanged();
          return this;
        }
        /**
         * <code>optional string display = 4;</code>
         *
         * <pre>
         * A build ID string meant for displaying to the user
         * </pre>
         */
        public Builder setDisplayBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
          display_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object fingerprint_ = "";
        /**
         * <code>optional string fingerprint = 5;</code>
         *
         * <pre>
         * A string that uniquely identifies this build. Do not attempt to parse this value.
         * </pre>
         */
        public boolean hasFingerprint() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional string fingerprint = 5;</code>
         *
         * <pre>
         * A string that uniquely identifies this build. Do not attempt to parse this value.
         * </pre>
         */
        public java.lang.String getFingerprint() {
          java.lang.Object ref = fingerprint_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              fingerprint_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string fingerprint = 5;</code>
         *
         * <pre>
         * A string that uniquely identifies this build. Do not attempt to parse this value.
         * </pre>
         */
        public com.google.protobuf.ByteString
            getFingerprintBytes() {
          java.lang.Object ref = fingerprint_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            fingerprint_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string fingerprint = 5;</code>
         *
         * <pre>
         * A string that uniquely identifies this build. Do not attempt to parse this value.
         * </pre>
         */
        public Builder setFingerprint(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
          fingerprint_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string fingerprint = 5;</code>
         *
         * <pre>
         * A string that uniquely identifies this build. Do not attempt to parse this value.
         * </pre>
         */
        public Builder clearFingerprint() {
          bitField0_ = (bitField0_ & ~0x00000010);
          fingerprint_ = getDefaultInstance().getFingerprint();
          onChanged();
          return this;
        }
        /**
         * <code>optional string fingerprint = 5;</code>
         *
         * <pre>
         * A string that uniquely identifies this build. Do not attempt to parse this value.
         * </pre>
         */
        public Builder setFingerprintBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
          fingerprint_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object hardware_ = "";
        /**
         * <code>optional string hardware = 6;</code>
         *
         * <pre>
         * The name of the hardware (from the kernel command line or /proc).
         * </pre>
         */
        public boolean hasHardware() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>optional string hardware = 6;</code>
         *
         * <pre>
         * The name of the hardware (from the kernel command line or /proc).
         * </pre>
         */
        public java.lang.String getHardware() {
          java.lang.Object ref = hardware_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              hardware_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string hardware = 6;</code>
         *
         * <pre>
         * The name of the hardware (from the kernel command line or /proc).
         * </pre>
         */
        public com.google.protobuf.ByteString
            getHardwareBytes() {
          java.lang.Object ref = hardware_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            hardware_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string hardware = 6;</code>
         *
         * <pre>
         * The name of the hardware (from the kernel command line or /proc).
         * </pre>
         */
        public Builder setHardware(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
          hardware_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string hardware = 6;</code>
         *
         * <pre>
         * The name of the hardware (from the kernel command line or /proc).
         * </pre>
         */
        public Builder clearHardware() {
          bitField0_ = (bitField0_ & ~0x00000020);
          hardware_ = getDefaultInstance().getHardware();
          onChanged();
          return this;
        }
        /**
         * <code>optional string hardware = 6;</code>
         *
         * <pre>
         * The name of the hardware (from the kernel command line or /proc).
         * </pre>
         */
        public Builder setHardwareBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
          hardware_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object id_ = "";
        /**
         * <code>optional string id = 7;</code>
         *
         * <pre>
         * Either a changelist number, or a label like "M4-rc20".
         * </pre>
         */
        public boolean hasId() {
          return ((bitField0_ & 0x00000040) == 0x00000040);
        }
        /**
         * <code>optional string id = 7;</code>
         *
         * <pre>
         * Either a changelist number, or a label like "M4-rc20".
         * </pre>
         */
        public java.lang.String getId() {
          java.lang.Object ref = id_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              id_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string id = 7;</code>
         *
         * <pre>
         * Either a changelist number, or a label like "M4-rc20".
         * </pre>
         */
        public com.google.protobuf.ByteString
            getIdBytes() {
          java.lang.Object ref = id_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            id_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string id = 7;</code>
         *
         * <pre>
         * Either a changelist number, or a label like "M4-rc20".
         * </pre>
         */
        public Builder setId(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
          id_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string id = 7;</code>
         *
         * <pre>
         * Either a changelist number, or a label like "M4-rc20".
         * </pre>
         */
        public Builder clearId() {
          bitField0_ = (bitField0_ & ~0x00000040);
          id_ = getDefaultInstance().getId();
          onChanged();
          return this;
        }
        /**
         * <code>optional string id = 7;</code>
         *
         * <pre>
         * Either a changelist number, or a label like "M4-rc20".
         * </pre>
         */
        public Builder setIdBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
          id_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object manufacturer_ = "";
        /**
         * <code>optional string manufacturer = 8;</code>
         *
         * <pre>
         * The manufacturer of the product/hardware
         * </pre>
         */
        public boolean hasManufacturer() {
          return ((bitField0_ & 0x00000080) == 0x00000080);
        }
        /**
         * <code>optional string manufacturer = 8;</code>
         *
         * <pre>
         * The manufacturer of the product/hardware
         * </pre>
         */
        public java.lang.String getManufacturer() {
          java.lang.Object ref = manufacturer_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              manufacturer_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string manufacturer = 8;</code>
         *
         * <pre>
         * The manufacturer of the product/hardware
         * </pre>
         */
        public com.google.protobuf.ByteString
            getManufacturerBytes() {
          java.lang.Object ref = manufacturer_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            manufacturer_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string manufacturer = 8;</code>
         *
         * <pre>
         * The manufacturer of the product/hardware
         * </pre>
         */
        public Builder setManufacturer(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
          manufacturer_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string manufacturer = 8;</code>
         *
         * <pre>
         * The manufacturer of the product/hardware
         * </pre>
         */
        public Builder clearManufacturer() {
          bitField0_ = (bitField0_ & ~0x00000080);
          manufacturer_ = getDefaultInstance().getManufacturer();
          onChanged();
          return this;
        }
        /**
         * <code>optional string manufacturer = 8;</code>
         *
         * <pre>
         * The manufacturer of the product/hardware
         * </pre>
         */
        public Builder setManufacturerBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
          manufacturer_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object model_ = "";
        /**
         * <code>optional string model = 9;</code>
         *
         * <pre>
         * The end-user-visible name for the end product.
         * </pre>
         */
        public boolean hasModel() {
          return ((bitField0_ & 0x00000100) == 0x00000100);
        }
        /**
         * <code>optional string model = 9;</code>
         *
         * <pre>
         * The end-user-visible name for the end product.
         * </pre>
         */
        public java.lang.String getModel() {
          java.lang.Object ref = model_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              model_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string model = 9;</code>
         *
         * <pre>
         * The end-user-visible name for the end product.
         * </pre>
         */
        public com.google.protobuf.ByteString
            getModelBytes() {
          java.lang.Object ref = model_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            model_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string model = 9;</code>
         *
         * <pre>
         * The end-user-visible name for the end product.
         * </pre>
         */
        public Builder setModel(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
          model_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string model = 9;</code>
         *
         * <pre>
         * The end-user-visible name for the end product.
         * </pre>
         */
        public Builder clearModel() {
          bitField0_ = (bitField0_ & ~0x00000100);
          model_ = getDefaultInstance().getModel();
          onChanged();
          return this;
        }
        /**
         * <code>optional string model = 9;</code>
         *
         * <pre>
         * The end-user-visible name for the end product.
         * </pre>
         */
        public Builder setModelBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000100;
          model_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object product_ = "";
        /**
         * <code>optional string product = 10;</code>
         *
         * <pre>
         * The name of the overall product.
         * </pre>
         */
        public boolean hasProduct() {
          return ((bitField0_ & 0x00000200) == 0x00000200);
        }
        /**
         * <code>optional string product = 10;</code>
         *
         * <pre>
         * The name of the overall product.
         * </pre>
         */
        public java.lang.String getProduct() {
          java.lang.Object ref = product_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              product_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string product = 10;</code>
         *
         * <pre>
         * The name of the overall product.
         * </pre>
         */
        public com.google.protobuf.ByteString
            getProductBytes() {
          java.lang.Object ref = product_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            product_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string product = 10;</code>
         *
         * <pre>
         * The name of the overall product.
         * </pre>
         */
        public Builder setProduct(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
          product_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string product = 10;</code>
         *
         * <pre>
         * The name of the overall product.
         * </pre>
         */
        public Builder clearProduct() {
          bitField0_ = (bitField0_ & ~0x00000200);
          product_ = getDefaultInstance().getProduct();
          onChanged();
          return this;
        }
        /**
         * <code>optional string product = 10;</code>
         *
         * <pre>
         * The name of the overall product.
         * </pre>
         */
        public Builder setProductBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000200;
          product_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object serial_ = "";
        /**
         * <code>optional string serial = 11;</code>
         *
         * <pre>
         * A hardware serial number, if available. Alphanumeric only, case-insensitive.
         * </pre>
         */
        public boolean hasSerial() {
          return ((bitField0_ & 0x00000400) == 0x00000400);
        }
        /**
         * <code>optional string serial = 11;</code>
         *
         * <pre>
         * A hardware serial number, if available. Alphanumeric only, case-insensitive.
         * </pre>
         */
        public java.lang.String getSerial() {
          java.lang.Object ref = serial_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              serial_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string serial = 11;</code>
         *
         * <pre>
         * A hardware serial number, if available. Alphanumeric only, case-insensitive.
         * </pre>
         */
        public com.google.protobuf.ByteString
            getSerialBytes() {
          java.lang.Object ref = serial_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            serial_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string serial = 11;</code>
         *
         * <pre>
         * A hardware serial number, if available. Alphanumeric only, case-insensitive.
         * </pre>
         */
        public Builder setSerial(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
          serial_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string serial = 11;</code>
         *
         * <pre>
         * A hardware serial number, if available. Alphanumeric only, case-insensitive.
         * </pre>
         */
        public Builder clearSerial() {
          bitField0_ = (bitField0_ & ~0x00000400);
          serial_ = getDefaultInstance().getSerial();
          onChanged();
          return this;
        }
        /**
         * <code>optional string serial = 11;</code>
         *
         * <pre>
         * A hardware serial number, if available. Alphanumeric only, case-insensitive.
         * </pre>
         */
        public Builder setSerialBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000400;
          serial_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object radioVersion_ = "";
        /**
         * <code>optional string radio_version = 12;</code>
         *
         * <pre>
         * the version string for the radio firmware. May be null (if, for instance, the radio is not currently on).
         * </pre>
         */
        public boolean hasRadioVersion() {
          return ((bitField0_ & 0x00000800) == 0x00000800);
        }
        /**
         * <code>optional string radio_version = 12;</code>
         *
         * <pre>
         * the version string for the radio firmware. May be null (if, for instance, the radio is not currently on).
         * </pre>
         */
        public java.lang.String getRadioVersion() {
          java.lang.Object ref = radioVersion_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              radioVersion_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string radio_version = 12;</code>
         *
         * <pre>
         * the version string for the radio firmware. May be null (if, for instance, the radio is not currently on).
         * </pre>
         */
        public com.google.protobuf.ByteString
            getRadioVersionBytes() {
          java.lang.Object ref = radioVersion_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            radioVersion_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string radio_version = 12;</code>
         *
         * <pre>
         * the version string for the radio firmware. May be null (if, for instance, the radio is not currently on).
         * </pre>
         */
        public Builder setRadioVersion(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
          radioVersion_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string radio_version = 12;</code>
         *
         * <pre>
         * the version string for the radio firmware. May be null (if, for instance, the radio is not currently on).
         * </pre>
         */
        public Builder clearRadioVersion() {
          bitField0_ = (bitField0_ & ~0x00000800);
          radioVersion_ = getDefaultInstance().getRadioVersion();
          onChanged();
          return this;
        }
        /**
         * <code>optional string radio_version = 12;</code>
         *
         * <pre>
         * the version string for the radio firmware. May be null (if, for instance, the radio is not currently on).
         * </pre>
         */
        public Builder setRadioVersionBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000800;
          radioVersion_ = value;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:perfloc.Metadata.DeviceDescription)
      }

      static {
        defaultInstance = new DeviceDescription(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:perfloc.Metadata.DeviceDescription)
    }

    public interface SensorOrBuilder extends
        // @@protoc_insertion_point(interface_extends:perfloc.Metadata.Sensor)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional int32 type = 1;</code>
       *
       * <pre>
       * generic type of this sensor
       * </pre>
       */
      boolean hasType();
      /**
       * <code>optional int32 type = 1;</code>
       *
       * <pre>
       * generic type of this sensor
       * </pre>
       */
      int getType();

      /**
       * <code>optional string string_type = 2;</code>
       *
       * <pre>
       * The type of this sensor as a string
       * </pre>
       */
      boolean hasStringType();
      /**
       * <code>optional string string_type = 2;</code>
       *
       * <pre>
       * The type of this sensor as a string
       * </pre>
       */
      java.lang.String getStringType();
      /**
       * <code>optional string string_type = 2;</code>
       *
       * <pre>
       * The type of this sensor as a string
       * </pre>
       */
      com.google.protobuf.ByteString
          getStringTypeBytes();

      /**
       * <code>optional string name = 3;</code>
       *
       * <pre>
       * name string of the sensor
       * </pre>
       */
      boolean hasName();
      /**
       * <code>optional string name = 3;</code>
       *
       * <pre>
       * name string of the sensor
       * </pre>
       */
      java.lang.String getName();
      /**
       * <code>optional string name = 3;</code>
       *
       * <pre>
       * name string of the sensor
       * </pre>
       */
      com.google.protobuf.ByteString
          getNameBytes();

      /**
       * <code>optional bool is_wakeup_sensor = 4;</code>
       *
       * <pre>
       * Returns true if the sensor is a wake-up sensor. See http://developer.android.com/reference/android/hardware/Sensor.html#isWakeUpSensor()
       * </pre>
       */
      boolean hasIsWakeupSensor();
      /**
       * <code>optional bool is_wakeup_sensor = 4;</code>
       *
       * <pre>
       * Returns true if the sensor is a wake-up sensor. See http://developer.android.com/reference/android/hardware/Sensor.html#isWakeUpSensor()
       * </pre>
       */
      boolean getIsWakeupSensor();

      /**
       * <code>optional string vendor = 5;</code>
       *
       * <pre>
       * vendor string of this sensor
       * </pre>
       */
      boolean hasVendor();
      /**
       * <code>optional string vendor = 5;</code>
       *
       * <pre>
       * vendor string of this sensor
       * </pre>
       */
      java.lang.String getVendor();
      /**
       * <code>optional string vendor = 5;</code>
       *
       * <pre>
       * vendor string of this sensor
       * </pre>
       */
      com.google.protobuf.ByteString
          getVendorBytes();

      /**
       * <code>optional int32 version = 6;</code>
       *
       * <pre>
       * version of the sensor's module
       * </pre>
       */
      boolean hasVersion();
      /**
       * <code>optional int32 version = 6;</code>
       *
       * <pre>
       * version of the sensor's module
       * </pre>
       */
      int getVersion();

      /**
       * <code>optional float resolution = 7;</code>
       *
       * <pre>
       * resolution of the sensor in the sensor's unit
       * </pre>
       */
      boolean hasResolution();
      /**
       * <code>optional float resolution = 7;</code>
       *
       * <pre>
       * resolution of the sensor in the sensor's unit
       * </pre>
       */
      float getResolution();

      /**
       * <code>optional int32 reporting_mode = 8;</code>
       *
       * <pre>
       * Each sensor has exactly one reporting mode associated with it. This method returns the reporting mode constant for this sensor type. {REPORTING_MODE_CONTINUOUS, REPORTING_MODE_ON_CHANGE, REPORTING_MODE_ONE_SHOT, REPORTING_MODE_SPECIAL_TRIGGER}
       * </pre>
       */
      boolean hasReportingMode();
      /**
       * <code>optional int32 reporting_mode = 8;</code>
       *
       * <pre>
       * Each sensor has exactly one reporting mode associated with it. This method returns the reporting mode constant for this sensor type. {REPORTING_MODE_CONTINUOUS, REPORTING_MODE_ON_CHANGE, REPORTING_MODE_ONE_SHOT, REPORTING_MODE_SPECIAL_TRIGGER}
       * </pre>
       */
      int getReportingMode();

      /**
       * <code>optional float power = 9;</code>
       *
       * <pre>
       * the power in mA used by this sensor while in use
       * </pre>
       */
      boolean hasPower();
      /**
       * <code>optional float power = 9;</code>
       *
       * <pre>
       * the power in mA used by this sensor while in use
       * </pre>
       */
      float getPower();

      /**
       * <code>optional int32 fifo_max_event_count = 10;</code>
       *
       * <pre>
       *Maximum number of events of this sensor that could be batched
       * </pre>
       */
      boolean hasFifoMaxEventCount();
      /**
       * <code>optional int32 fifo_max_event_count = 10;</code>
       *
       * <pre>
       *Maximum number of events of this sensor that could be batched
       * </pre>
       */
      int getFifoMaxEventCount();

      /**
       * <code>optional int32 fifo_reserved_event_count = 11;</code>
       *
       * <pre>
       *Number of events reserved for this sensor in the batch mode FIFO
       * </pre>
       */
      boolean hasFifoReservedEventCount();
      /**
       * <code>optional int32 fifo_reserved_event_count = 11;</code>
       *
       * <pre>
       *Number of events reserved for this sensor in the batch mode FIFO
       * </pre>
       */
      int getFifoReservedEventCount();

      /**
       * <code>optional float maximum_range = 12;</code>
       *
       * <pre>
       * Maximum range of the sensor in the sensor's unit
       * </pre>
       */
      boolean hasMaximumRange();
      /**
       * <code>optional float maximum_range = 12;</code>
       *
       * <pre>
       * Maximum range of the sensor in the sensor's unit
       * </pre>
       */
      float getMaximumRange();

      /**
       * <code>optional float min_delay = 13;</code>
       *
       * <pre>
       * The minimum delay allowed between two events in microsecond or zero if this sensor only returns a value when the data it's measuring changes.
       * </pre>
       */
      boolean hasMinDelay();
      /**
       * <code>optional float min_delay = 13;</code>
       *
       * <pre>
       * The minimum delay allowed between two events in microsecond or zero if this sensor only returns a value when the data it's measuring changes.
       * </pre>
       */
      float getMinDelay();
    }
    /**
     * Protobuf type {@code perfloc.Metadata.Sensor}
     */
    public static final class Sensor extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:perfloc.Metadata.Sensor)
        SensorOrBuilder {
      // Use Sensor.newBuilder() to construct.
      private Sensor(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Sensor(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Sensor defaultInstance;
      public static Sensor getDefaultInstance() {
        return defaultInstance;
      }

      public Sensor getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Sensor(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                type_ = input.readInt32();
                break;
              }
              case 18: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000002;
                stringType_ = bs;
                break;
              }
              case 26: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000004;
                name_ = bs;
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                isWakeupSensor_ = input.readBool();
                break;
              }
              case 42: {
                com.google.protobuf.ByteString bs = input.readBytes();
                bitField0_ |= 0x00000010;
                vendor_ = bs;
                break;
              }
              case 48: {
                bitField0_ |= 0x00000020;
                version_ = input.readInt32();
                break;
              }
              case 61: {
                bitField0_ |= 0x00000040;
                resolution_ = input.readFloat();
                break;
              }
              case 64: {
                bitField0_ |= 0x00000080;
                reportingMode_ = input.readInt32();
                break;
              }
              case 77: {
                bitField0_ |= 0x00000100;
                power_ = input.readFloat();
                break;
              }
              case 80: {
                bitField0_ |= 0x00000200;
                fifoMaxEventCount_ = input.readInt32();
                break;
              }
              case 88: {
                bitField0_ |= 0x00000400;
                fifoReservedEventCount_ = input.readInt32();
                break;
              }
              case 101: {
                bitField0_ |= 0x00000800;
                maximumRange_ = input.readFloat();
                break;
              }
              case 109: {
                bitField0_ |= 0x00001000;
                minDelay_ = input.readFloat();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gov.nist.perfloc.MetaData.internal_static_perfloc_Metadata_Sensor_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gov.nist.perfloc.MetaData.internal_static_perfloc_Metadata_Sensor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gov.nist.perfloc.MetaData.Metadata.Sensor.class, gov.nist.perfloc.MetaData.Metadata.Sensor.Builder.class);
      }

      public static com.google.protobuf.Parser<Sensor> PARSER =
          new com.google.protobuf.AbstractParser<Sensor>() {
        public Sensor parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Sensor(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Sensor> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      public static final int TYPE_FIELD_NUMBER = 1;
      private int type_;
      /**
       * <code>optional int32 type = 1;</code>
       *
       * <pre>
       * generic type of this sensor
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 type = 1;</code>
       *
       * <pre>
       * generic type of this sensor
       * </pre>
       */
      public int getType() {
        return type_;
      }

      public static final int STRING_TYPE_FIELD_NUMBER = 2;
      private java.lang.Object stringType_;
      /**
       * <code>optional string string_type = 2;</code>
       *
       * <pre>
       * The type of this sensor as a string
       * </pre>
       */
      public boolean hasStringType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string string_type = 2;</code>
       *
       * <pre>
       * The type of this sensor as a string
       * </pre>
       */
      public java.lang.String getStringType() {
        java.lang.Object ref = stringType_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            stringType_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string string_type = 2;</code>
       *
       * <pre>
       * The type of this sensor as a string
       * </pre>
       */
      public com.google.protobuf.ByteString
          getStringTypeBytes() {
        java.lang.Object ref = stringType_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stringType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int NAME_FIELD_NUMBER = 3;
      private java.lang.Object name_;
      /**
       * <code>optional string name = 3;</code>
       *
       * <pre>
       * name string of the sensor
       * </pre>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string name = 3;</code>
       *
       * <pre>
       * name string of the sensor
       * </pre>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            name_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string name = 3;</code>
       *
       * <pre>
       * name string of the sensor
       * </pre>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int IS_WAKEUP_SENSOR_FIELD_NUMBER = 4;
      private boolean isWakeupSensor_;
      /**
       * <code>optional bool is_wakeup_sensor = 4;</code>
       *
       * <pre>
       * Returns true if the sensor is a wake-up sensor. See http://developer.android.com/reference/android/hardware/Sensor.html#isWakeUpSensor()
       * </pre>
       */
      public boolean hasIsWakeupSensor() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool is_wakeup_sensor = 4;</code>
       *
       * <pre>
       * Returns true if the sensor is a wake-up sensor. See http://developer.android.com/reference/android/hardware/Sensor.html#isWakeUpSensor()
       * </pre>
       */
      public boolean getIsWakeupSensor() {
        return isWakeupSensor_;
      }

      public static final int VENDOR_FIELD_NUMBER = 5;
      private java.lang.Object vendor_;
      /**
       * <code>optional string vendor = 5;</code>
       *
       * <pre>
       * vendor string of this sensor
       * </pre>
       */
      public boolean hasVendor() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string vendor = 5;</code>
       *
       * <pre>
       * vendor string of this sensor
       * </pre>
       */
      public java.lang.String getVendor() {
        java.lang.Object ref = vendor_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            vendor_ = s;
          }
          return s;
        }
      }
      /**
       * <code>optional string vendor = 5;</code>
       *
       * <pre>
       * vendor string of this sensor
       * </pre>
       */
      public com.google.protobuf.ByteString
          getVendorBytes() {
        java.lang.Object ref = vendor_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vendor_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int VERSION_FIELD_NUMBER = 6;
      private int version_;
      /**
       * <code>optional int32 version = 6;</code>
       *
       * <pre>
       * version of the sensor's module
       * </pre>
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 version = 6;</code>
       *
       * <pre>
       * version of the sensor's module
       * </pre>
       */
      public int getVersion() {
        return version_;
      }

      public static final int RESOLUTION_FIELD_NUMBER = 7;
      private float resolution_;
      /**
       * <code>optional float resolution = 7;</code>
       *
       * <pre>
       * resolution of the sensor in the sensor's unit
       * </pre>
       */
      public boolean hasResolution() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float resolution = 7;</code>
       *
       * <pre>
       * resolution of the sensor in the sensor's unit
       * </pre>
       */
      public float getResolution() {
        return resolution_;
      }

      public static final int REPORTING_MODE_FIELD_NUMBER = 8;
      private int reportingMode_;
      /**
       * <code>optional int32 reporting_mode = 8;</code>
       *
       * <pre>
       * Each sensor has exactly one reporting mode associated with it. This method returns the reporting mode constant for this sensor type. {REPORTING_MODE_CONTINUOUS, REPORTING_MODE_ON_CHANGE, REPORTING_MODE_ONE_SHOT, REPORTING_MODE_SPECIAL_TRIGGER}
       * </pre>
       */
      public boolean hasReportingMode() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 reporting_mode = 8;</code>
       *
       * <pre>
       * Each sensor has exactly one reporting mode associated with it. This method returns the reporting mode constant for this sensor type. {REPORTING_MODE_CONTINUOUS, REPORTING_MODE_ON_CHANGE, REPORTING_MODE_ONE_SHOT, REPORTING_MODE_SPECIAL_TRIGGER}
       * </pre>
       */
      public int getReportingMode() {
        return reportingMode_;
      }

      public static final int POWER_FIELD_NUMBER = 9;
      private float power_;
      /**
       * <code>optional float power = 9;</code>
       *
       * <pre>
       * the power in mA used by this sensor while in use
       * </pre>
       */
      public boolean hasPower() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional float power = 9;</code>
       *
       * <pre>
       * the power in mA used by this sensor while in use
       * </pre>
       */
      public float getPower() {
        return power_;
      }

      public static final int FIFO_MAX_EVENT_COUNT_FIELD_NUMBER = 10;
      private int fifoMaxEventCount_;
      /**
       * <code>optional int32 fifo_max_event_count = 10;</code>
       *
       * <pre>
       *Maximum number of events of this sensor that could be batched
       * </pre>
       */
      public boolean hasFifoMaxEventCount() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 fifo_max_event_count = 10;</code>
       *
       * <pre>
       *Maximum number of events of this sensor that could be batched
       * </pre>
       */
      public int getFifoMaxEventCount() {
        return fifoMaxEventCount_;
      }

      public static final int FIFO_RESERVED_EVENT_COUNT_FIELD_NUMBER = 11;
      private int fifoReservedEventCount_;
      /**
       * <code>optional int32 fifo_reserved_event_count = 11;</code>
       *
       * <pre>
       *Number of events reserved for this sensor in the batch mode FIFO
       * </pre>
       */
      public boolean hasFifoReservedEventCount() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional int32 fifo_reserved_event_count = 11;</code>
       *
       * <pre>
       *Number of events reserved for this sensor in the batch mode FIFO
       * </pre>
       */
      public int getFifoReservedEventCount() {
        return fifoReservedEventCount_;
      }

      public static final int MAXIMUM_RANGE_FIELD_NUMBER = 12;
      private float maximumRange_;
      /**
       * <code>optional float maximum_range = 12;</code>
       *
       * <pre>
       * Maximum range of the sensor in the sensor's unit
       * </pre>
       */
      public boolean hasMaximumRange() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float maximum_range = 12;</code>
       *
       * <pre>
       * Maximum range of the sensor in the sensor's unit
       * </pre>
       */
      public float getMaximumRange() {
        return maximumRange_;
      }

      public static final int MIN_DELAY_FIELD_NUMBER = 13;
      private float minDelay_;
      /**
       * <code>optional float min_delay = 13;</code>
       *
       * <pre>
       * The minimum delay allowed between two events in microsecond or zero if this sensor only returns a value when the data it's measuring changes.
       * </pre>
       */
      public boolean hasMinDelay() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional float min_delay = 13;</code>
       *
       * <pre>
       * The minimum delay allowed between two events in microsecond or zero if this sensor only returns a value when the data it's measuring changes.
       * </pre>
       */
      public float getMinDelay() {
        return minDelay_;
      }

      private void initFields() {
        type_ = 0;
        stringType_ = "";
        name_ = "";
        isWakeupSensor_ = false;
        vendor_ = "";
        version_ = 0;
        resolution_ = 0F;
        reportingMode_ = 0;
        power_ = 0F;
        fifoMaxEventCount_ = 0;
        fifoReservedEventCount_ = 0;
        maximumRange_ = 0F;
        minDelay_ = 0F;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, type_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBytes(2, getStringTypeBytes());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeBytes(3, getNameBytes());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeBool(4, isWakeupSensor_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeBytes(5, getVendorBytes());
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          output.writeInt32(6, version_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          output.writeFloat(7, resolution_);
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          output.writeInt32(8, reportingMode_);
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          output.writeFloat(9, power_);
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          output.writeInt32(10, fifoMaxEventCount_);
        }
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          output.writeInt32(11, fifoReservedEventCount_);
        }
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          output.writeFloat(12, maximumRange_);
        }
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          output.writeFloat(13, minDelay_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, type_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(2, getStringTypeBytes());
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(3, getNameBytes());
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(4, isWakeupSensor_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBytesSize(5, getVendorBytes());
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(6, version_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(7, resolution_);
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(8, reportingMode_);
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(9, power_);
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(10, fifoMaxEventCount_);
        }
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(11, fifoReservedEventCount_);
        }
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(12, maximumRange_);
        }
        if (((bitField0_ & 0x00001000) == 0x00001000)) {
          size += com.google.protobuf.CodedOutputStream
            .computeFloatSize(13, minDelay_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static gov.nist.perfloc.MetaData.Metadata.Sensor parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static gov.nist.perfloc.MetaData.Metadata.Sensor parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static gov.nist.perfloc.MetaData.Metadata.Sensor parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static gov.nist.perfloc.MetaData.Metadata.Sensor parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static gov.nist.perfloc.MetaData.Metadata.Sensor parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static gov.nist.perfloc.MetaData.Metadata.Sensor parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static gov.nist.perfloc.MetaData.Metadata.Sensor parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static gov.nist.perfloc.MetaData.Metadata.Sensor parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static gov.nist.perfloc.MetaData.Metadata.Sensor parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static gov.nist.perfloc.MetaData.Metadata.Sensor parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(gov.nist.perfloc.MetaData.Metadata.Sensor prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code perfloc.Metadata.Sensor}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:perfloc.Metadata.Sensor)
          gov.nist.perfloc.MetaData.Metadata.SensorOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return gov.nist.perfloc.MetaData.internal_static_perfloc_Metadata_Sensor_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return gov.nist.perfloc.MetaData.internal_static_perfloc_Metadata_Sensor_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  gov.nist.perfloc.MetaData.Metadata.Sensor.class, gov.nist.perfloc.MetaData.Metadata.Sensor.Builder.class);
        }

        // Construct using gov.nist.perfloc.MetaData.Metadata.Sensor.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          type_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          stringType_ = "";
          bitField0_ = (bitField0_ & ~0x00000002);
          name_ = "";
          bitField0_ = (bitField0_ & ~0x00000004);
          isWakeupSensor_ = false;
          bitField0_ = (bitField0_ & ~0x00000008);
          vendor_ = "";
          bitField0_ = (bitField0_ & ~0x00000010);
          version_ = 0;
          bitField0_ = (bitField0_ & ~0x00000020);
          resolution_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000040);
          reportingMode_ = 0;
          bitField0_ = (bitField0_ & ~0x00000080);
          power_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000100);
          fifoMaxEventCount_ = 0;
          bitField0_ = (bitField0_ & ~0x00000200);
          fifoReservedEventCount_ = 0;
          bitField0_ = (bitField0_ & ~0x00000400);
          maximumRange_ = 0F;
          bitField0_ = (bitField0_ & ~0x00000800);
          minDelay_ = 0F;
          bitField0_ = (bitField0_ & ~0x00001000);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return gov.nist.perfloc.MetaData.internal_static_perfloc_Metadata_Sensor_descriptor;
        }

        public gov.nist.perfloc.MetaData.Metadata.Sensor getDefaultInstanceForType() {
          return gov.nist.perfloc.MetaData.Metadata.Sensor.getDefaultInstance();
        }

        public gov.nist.perfloc.MetaData.Metadata.Sensor build() {
          gov.nist.perfloc.MetaData.Metadata.Sensor result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public gov.nist.perfloc.MetaData.Metadata.Sensor buildPartial() {
          gov.nist.perfloc.MetaData.Metadata.Sensor result = new gov.nist.perfloc.MetaData.Metadata.Sensor(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.type_ = type_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.stringType_ = stringType_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.name_ = name_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.isWakeupSensor_ = isWakeupSensor_;
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          result.vendor_ = vendor_;
          if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
            to_bitField0_ |= 0x00000020;
          }
          result.version_ = version_;
          if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
            to_bitField0_ |= 0x00000040;
          }
          result.resolution_ = resolution_;
          if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
            to_bitField0_ |= 0x00000080;
          }
          result.reportingMode_ = reportingMode_;
          if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
            to_bitField0_ |= 0x00000100;
          }
          result.power_ = power_;
          if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
            to_bitField0_ |= 0x00000200;
          }
          result.fifoMaxEventCount_ = fifoMaxEventCount_;
          if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
            to_bitField0_ |= 0x00000400;
          }
          result.fifoReservedEventCount_ = fifoReservedEventCount_;
          if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
            to_bitField0_ |= 0x00000800;
          }
          result.maximumRange_ = maximumRange_;
          if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
            to_bitField0_ |= 0x00001000;
          }
          result.minDelay_ = minDelay_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof gov.nist.perfloc.MetaData.Metadata.Sensor) {
            return mergeFrom((gov.nist.perfloc.MetaData.Metadata.Sensor)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(gov.nist.perfloc.MetaData.Metadata.Sensor other) {
          if (other == gov.nist.perfloc.MetaData.Metadata.Sensor.getDefaultInstance()) return this;
          if (other.hasType()) {
            setType(other.getType());
          }
          if (other.hasStringType()) {
            bitField0_ |= 0x00000002;
            stringType_ = other.stringType_;
            onChanged();
          }
          if (other.hasName()) {
            bitField0_ |= 0x00000004;
            name_ = other.name_;
            onChanged();
          }
          if (other.hasIsWakeupSensor()) {
            setIsWakeupSensor(other.getIsWakeupSensor());
          }
          if (other.hasVendor()) {
            bitField0_ |= 0x00000010;
            vendor_ = other.vendor_;
            onChanged();
          }
          if (other.hasVersion()) {
            setVersion(other.getVersion());
          }
          if (other.hasResolution()) {
            setResolution(other.getResolution());
          }
          if (other.hasReportingMode()) {
            setReportingMode(other.getReportingMode());
          }
          if (other.hasPower()) {
            setPower(other.getPower());
          }
          if (other.hasFifoMaxEventCount()) {
            setFifoMaxEventCount(other.getFifoMaxEventCount());
          }
          if (other.hasFifoReservedEventCount()) {
            setFifoReservedEventCount(other.getFifoReservedEventCount());
          }
          if (other.hasMaximumRange()) {
            setMaximumRange(other.getMaximumRange());
          }
          if (other.hasMinDelay()) {
            setMinDelay(other.getMinDelay());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          gov.nist.perfloc.MetaData.Metadata.Sensor parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (gov.nist.perfloc.MetaData.Metadata.Sensor) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private int type_ ;
        /**
         * <code>optional int32 type = 1;</code>
         *
         * <pre>
         * generic type of this sensor
         * </pre>
         */
        public boolean hasType() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional int32 type = 1;</code>
         *
         * <pre>
         * generic type of this sensor
         * </pre>
         */
        public int getType() {
          return type_;
        }
        /**
         * <code>optional int32 type = 1;</code>
         *
         * <pre>
         * generic type of this sensor
         * </pre>
         */
        public Builder setType(int value) {
          bitField0_ |= 0x00000001;
          type_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 type = 1;</code>
         *
         * <pre>
         * generic type of this sensor
         * </pre>
         */
        public Builder clearType() {
          bitField0_ = (bitField0_ & ~0x00000001);
          type_ = 0;
          onChanged();
          return this;
        }

        private java.lang.Object stringType_ = "";
        /**
         * <code>optional string string_type = 2;</code>
         *
         * <pre>
         * The type of this sensor as a string
         * </pre>
         */
        public boolean hasStringType() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional string string_type = 2;</code>
         *
         * <pre>
         * The type of this sensor as a string
         * </pre>
         */
        public java.lang.String getStringType() {
          java.lang.Object ref = stringType_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              stringType_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string string_type = 2;</code>
         *
         * <pre>
         * The type of this sensor as a string
         * </pre>
         */
        public com.google.protobuf.ByteString
            getStringTypeBytes() {
          java.lang.Object ref = stringType_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            stringType_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string string_type = 2;</code>
         *
         * <pre>
         * The type of this sensor as a string
         * </pre>
         */
        public Builder setStringType(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          stringType_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string string_type = 2;</code>
         *
         * <pre>
         * The type of this sensor as a string
         * </pre>
         */
        public Builder clearStringType() {
          bitField0_ = (bitField0_ & ~0x00000002);
          stringType_ = getDefaultInstance().getStringType();
          onChanged();
          return this;
        }
        /**
         * <code>optional string string_type = 2;</code>
         *
         * <pre>
         * The type of this sensor as a string
         * </pre>
         */
        public Builder setStringTypeBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
          stringType_ = value;
          onChanged();
          return this;
        }

        private java.lang.Object name_ = "";
        /**
         * <code>optional string name = 3;</code>
         *
         * <pre>
         * name string of the sensor
         * </pre>
         */
        public boolean hasName() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional string name = 3;</code>
         *
         * <pre>
         * name string of the sensor
         * </pre>
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              name_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string name = 3;</code>
         *
         * <pre>
         * name string of the sensor
         * </pre>
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string name = 3;</code>
         *
         * <pre>
         * name string of the sensor
         * </pre>
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          name_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string name = 3;</code>
         *
         * <pre>
         * name string of the sensor
         * </pre>
         */
        public Builder clearName() {
          bitField0_ = (bitField0_ & ~0x00000004);
          name_ = getDefaultInstance().getName();
          onChanged();
          return this;
        }
        /**
         * <code>optional string name = 3;</code>
         *
         * <pre>
         * name string of the sensor
         * </pre>
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
          name_ = value;
          onChanged();
          return this;
        }

        private boolean isWakeupSensor_ ;
        /**
         * <code>optional bool is_wakeup_sensor = 4;</code>
         *
         * <pre>
         * Returns true if the sensor is a wake-up sensor. See http://developer.android.com/reference/android/hardware/Sensor.html#isWakeUpSensor()
         * </pre>
         */
        public boolean hasIsWakeupSensor() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional bool is_wakeup_sensor = 4;</code>
         *
         * <pre>
         * Returns true if the sensor is a wake-up sensor. See http://developer.android.com/reference/android/hardware/Sensor.html#isWakeUpSensor()
         * </pre>
         */
        public boolean getIsWakeupSensor() {
          return isWakeupSensor_;
        }
        /**
         * <code>optional bool is_wakeup_sensor = 4;</code>
         *
         * <pre>
         * Returns true if the sensor is a wake-up sensor. See http://developer.android.com/reference/android/hardware/Sensor.html#isWakeUpSensor()
         * </pre>
         */
        public Builder setIsWakeupSensor(boolean value) {
          bitField0_ |= 0x00000008;
          isWakeupSensor_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional bool is_wakeup_sensor = 4;</code>
         *
         * <pre>
         * Returns true if the sensor is a wake-up sensor. See http://developer.android.com/reference/android/hardware/Sensor.html#isWakeUpSensor()
         * </pre>
         */
        public Builder clearIsWakeupSensor() {
          bitField0_ = (bitField0_ & ~0x00000008);
          isWakeupSensor_ = false;
          onChanged();
          return this;
        }

        private java.lang.Object vendor_ = "";
        /**
         * <code>optional string vendor = 5;</code>
         *
         * <pre>
         * vendor string of this sensor
         * </pre>
         */
        public boolean hasVendor() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional string vendor = 5;</code>
         *
         * <pre>
         * vendor string of this sensor
         * </pre>
         */
        public java.lang.String getVendor() {
          java.lang.Object ref = vendor_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
              vendor_ = s;
            }
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <code>optional string vendor = 5;</code>
         *
         * <pre>
         * vendor string of this sensor
         * </pre>
         */
        public com.google.protobuf.ByteString
            getVendorBytes() {
          java.lang.Object ref = vendor_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            vendor_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <code>optional string vendor = 5;</code>
         *
         * <pre>
         * vendor string of this sensor
         * </pre>
         */
        public Builder setVendor(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
          vendor_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional string vendor = 5;</code>
         *
         * <pre>
         * vendor string of this sensor
         * </pre>
         */
        public Builder clearVendor() {
          bitField0_ = (bitField0_ & ~0x00000010);
          vendor_ = getDefaultInstance().getVendor();
          onChanged();
          return this;
        }
        /**
         * <code>optional string vendor = 5;</code>
         *
         * <pre>
         * vendor string of this sensor
         * </pre>
         */
        public Builder setVendorBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
          vendor_ = value;
          onChanged();
          return this;
        }

        private int version_ ;
        /**
         * <code>optional int32 version = 6;</code>
         *
         * <pre>
         * version of the sensor's module
         * </pre>
         */
        public boolean hasVersion() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>optional int32 version = 6;</code>
         *
         * <pre>
         * version of the sensor's module
         * </pre>
         */
        public int getVersion() {
          return version_;
        }
        /**
         * <code>optional int32 version = 6;</code>
         *
         * <pre>
         * version of the sensor's module
         * </pre>
         */
        public Builder setVersion(int value) {
          bitField0_ |= 0x00000020;
          version_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 version = 6;</code>
         *
         * <pre>
         * version of the sensor's module
         * </pre>
         */
        public Builder clearVersion() {
          bitField0_ = (bitField0_ & ~0x00000020);
          version_ = 0;
          onChanged();
          return this;
        }

        private float resolution_ ;
        /**
         * <code>optional float resolution = 7;</code>
         *
         * <pre>
         * resolution of the sensor in the sensor's unit
         * </pre>
         */
        public boolean hasResolution() {
          return ((bitField0_ & 0x00000040) == 0x00000040);
        }
        /**
         * <code>optional float resolution = 7;</code>
         *
         * <pre>
         * resolution of the sensor in the sensor's unit
         * </pre>
         */
        public float getResolution() {
          return resolution_;
        }
        /**
         * <code>optional float resolution = 7;</code>
         *
         * <pre>
         * resolution of the sensor in the sensor's unit
         * </pre>
         */
        public Builder setResolution(float value) {
          bitField0_ |= 0x00000040;
          resolution_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional float resolution = 7;</code>
         *
         * <pre>
         * resolution of the sensor in the sensor's unit
         * </pre>
         */
        public Builder clearResolution() {
          bitField0_ = (bitField0_ & ~0x00000040);
          resolution_ = 0F;
          onChanged();
          return this;
        }

        private int reportingMode_ ;
        /**
         * <code>optional int32 reporting_mode = 8;</code>
         *
         * <pre>
         * Each sensor has exactly one reporting mode associated with it. This method returns the reporting mode constant for this sensor type. {REPORTING_MODE_CONTINUOUS, REPORTING_MODE_ON_CHANGE, REPORTING_MODE_ONE_SHOT, REPORTING_MODE_SPECIAL_TRIGGER}
         * </pre>
         */
        public boolean hasReportingMode() {
          return ((bitField0_ & 0x00000080) == 0x00000080);
        }
        /**
         * <code>optional int32 reporting_mode = 8;</code>
         *
         * <pre>
         * Each sensor has exactly one reporting mode associated with it. This method returns the reporting mode constant for this sensor type. {REPORTING_MODE_CONTINUOUS, REPORTING_MODE_ON_CHANGE, REPORTING_MODE_ONE_SHOT, REPORTING_MODE_SPECIAL_TRIGGER}
         * </pre>
         */
        public int getReportingMode() {
          return reportingMode_;
        }
        /**
         * <code>optional int32 reporting_mode = 8;</code>
         *
         * <pre>
         * Each sensor has exactly one reporting mode associated with it. This method returns the reporting mode constant for this sensor type. {REPORTING_MODE_CONTINUOUS, REPORTING_MODE_ON_CHANGE, REPORTING_MODE_ONE_SHOT, REPORTING_MODE_SPECIAL_TRIGGER}
         * </pre>
         */
        public Builder setReportingMode(int value) {
          bitField0_ |= 0x00000080;
          reportingMode_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 reporting_mode = 8;</code>
         *
         * <pre>
         * Each sensor has exactly one reporting mode associated with it. This method returns the reporting mode constant for this sensor type. {REPORTING_MODE_CONTINUOUS, REPORTING_MODE_ON_CHANGE, REPORTING_MODE_ONE_SHOT, REPORTING_MODE_SPECIAL_TRIGGER}
         * </pre>
         */
        public Builder clearReportingMode() {
          bitField0_ = (bitField0_ & ~0x00000080);
          reportingMode_ = 0;
          onChanged();
          return this;
        }

        private float power_ ;
        /**
         * <code>optional float power = 9;</code>
         *
         * <pre>
         * the power in mA used by this sensor while in use
         * </pre>
         */
        public boolean hasPower() {
          return ((bitField0_ & 0x00000100) == 0x00000100);
        }
        /**
         * <code>optional float power = 9;</code>
         *
         * <pre>
         * the power in mA used by this sensor while in use
         * </pre>
         */
        public float getPower() {
          return power_;
        }
        /**
         * <code>optional float power = 9;</code>
         *
         * <pre>
         * the power in mA used by this sensor while in use
         * </pre>
         */
        public Builder setPower(float value) {
          bitField0_ |= 0x00000100;
          power_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional float power = 9;</code>
         *
         * <pre>
         * the power in mA used by this sensor while in use
         * </pre>
         */
        public Builder clearPower() {
          bitField0_ = (bitField0_ & ~0x00000100);
          power_ = 0F;
          onChanged();
          return this;
        }

        private int fifoMaxEventCount_ ;
        /**
         * <code>optional int32 fifo_max_event_count = 10;</code>
         *
         * <pre>
         *Maximum number of events of this sensor that could be batched
         * </pre>
         */
        public boolean hasFifoMaxEventCount() {
          return ((bitField0_ & 0x00000200) == 0x00000200);
        }
        /**
         * <code>optional int32 fifo_max_event_count = 10;</code>
         *
         * <pre>
         *Maximum number of events of this sensor that could be batched
         * </pre>
         */
        public int getFifoMaxEventCount() {
          return fifoMaxEventCount_;
        }
        /**
         * <code>optional int32 fifo_max_event_count = 10;</code>
         *
         * <pre>
         *Maximum number of events of this sensor that could be batched
         * </pre>
         */
        public Builder setFifoMaxEventCount(int value) {
          bitField0_ |= 0x00000200;
          fifoMaxEventCount_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 fifo_max_event_count = 10;</code>
         *
         * <pre>
         *Maximum number of events of this sensor that could be batched
         * </pre>
         */
        public Builder clearFifoMaxEventCount() {
          bitField0_ = (bitField0_ & ~0x00000200);
          fifoMaxEventCount_ = 0;
          onChanged();
          return this;
        }

        private int fifoReservedEventCount_ ;
        /**
         * <code>optional int32 fifo_reserved_event_count = 11;</code>
         *
         * <pre>
         *Number of events reserved for this sensor in the batch mode FIFO
         * </pre>
         */
        public boolean hasFifoReservedEventCount() {
          return ((bitField0_ & 0x00000400) == 0x00000400);
        }
        /**
         * <code>optional int32 fifo_reserved_event_count = 11;</code>
         *
         * <pre>
         *Number of events reserved for this sensor in the batch mode FIFO
         * </pre>
         */
        public int getFifoReservedEventCount() {
          return fifoReservedEventCount_;
        }
        /**
         * <code>optional int32 fifo_reserved_event_count = 11;</code>
         *
         * <pre>
         *Number of events reserved for this sensor in the batch mode FIFO
         * </pre>
         */
        public Builder setFifoReservedEventCount(int value) {
          bitField0_ |= 0x00000400;
          fifoReservedEventCount_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional int32 fifo_reserved_event_count = 11;</code>
         *
         * <pre>
         *Number of events reserved for this sensor in the batch mode FIFO
         * </pre>
         */
        public Builder clearFifoReservedEventCount() {
          bitField0_ = (bitField0_ & ~0x00000400);
          fifoReservedEventCount_ = 0;
          onChanged();
          return this;
        }

        private float maximumRange_ ;
        /**
         * <code>optional float maximum_range = 12;</code>
         *
         * <pre>
         * Maximum range of the sensor in the sensor's unit
         * </pre>
         */
        public boolean hasMaximumRange() {
          return ((bitField0_ & 0x00000800) == 0x00000800);
        }
        /**
         * <code>optional float maximum_range = 12;</code>
         *
         * <pre>
         * Maximum range of the sensor in the sensor's unit
         * </pre>
         */
        public float getMaximumRange() {
          return maximumRange_;
        }
        /**
         * <code>optional float maximum_range = 12;</code>
         *
         * <pre>
         * Maximum range of the sensor in the sensor's unit
         * </pre>
         */
        public Builder setMaximumRange(float value) {
          bitField0_ |= 0x00000800;
          maximumRange_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional float maximum_range = 12;</code>
         *
         * <pre>
         * Maximum range of the sensor in the sensor's unit
         * </pre>
         */
        public Builder clearMaximumRange() {
          bitField0_ = (bitField0_ & ~0x00000800);
          maximumRange_ = 0F;
          onChanged();
          return this;
        }

        private float minDelay_ ;
        /**
         * <code>optional float min_delay = 13;</code>
         *
         * <pre>
         * The minimum delay allowed between two events in microsecond or zero if this sensor only returns a value when the data it's measuring changes.
         * </pre>
         */
        public boolean hasMinDelay() {
          return ((bitField0_ & 0x00001000) == 0x00001000);
        }
        /**
         * <code>optional float min_delay = 13;</code>
         *
         * <pre>
         * The minimum delay allowed between two events in microsecond or zero if this sensor only returns a value when the data it's measuring changes.
         * </pre>
         */
        public float getMinDelay() {
          return minDelay_;
        }
        /**
         * <code>optional float min_delay = 13;</code>
         *
         * <pre>
         * The minimum delay allowed between two events in microsecond or zero if this sensor only returns a value when the data it's measuring changes.
         * </pre>
         */
        public Builder setMinDelay(float value) {
          bitField0_ |= 0x00001000;
          minDelay_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional float min_delay = 13;</code>
         *
         * <pre>
         * The minimum delay allowed between two events in microsecond or zero if this sensor only returns a value when the data it's measuring changes.
         * </pre>
         */
        public Builder clearMinDelay() {
          bitField0_ = (bitField0_ & ~0x00001000);
          minDelay_ = 0F;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:perfloc.Metadata.Sensor)
      }

      static {
        defaultInstance = new Sensor(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:perfloc.Metadata.Sensor)
    }

    private int bitField0_;
    public static final int MEASUREMENT_ID_FIELD_NUMBER = 1;
    private int measurementId_;
    /**
     * <code>optional int32 measurement_id = 1;</code>
     *
     * <pre>
     * Identifier of the metadata
     * </pre>
     */
    public boolean hasMeasurementId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 measurement_id = 1;</code>
     *
     * <pre>
     * Identifier of the metadata
     * </pre>
     */
    public int getMeasurementId() {
      return measurementId_;
    }

    public static final int TIME_CREATED_FIELD_NUMBER = 2;
    private long timeCreated_;
    /**
     * <code>optional int64 time_created = 2;</code>
     *
     * <pre>
     * Creation date - milliseconds from 1.1.1970
     * </pre>
     */
    public boolean hasTimeCreated() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 time_created = 2;</code>
     *
     * <pre>
     * Creation date - milliseconds from 1.1.1970
     * </pre>
     */
    public long getTimeCreated() {
      return timeCreated_;
    }

    public static final int LICENSE_FIELD_NUMBER = 3;
    private java.lang.Object license_;
    /**
     * <code>optional string license = 3;</code>
     *
     * <pre>
     * License type
     * </pre>
     */
    public boolean hasLicense() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string license = 3;</code>
     *
     * <pre>
     * License type
     * </pre>
     */
    public java.lang.String getLicense() {
      java.lang.Object ref = license_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          license_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string license = 3;</code>
     *
     * <pre>
     * License type
     * </pre>
     */
    public com.google.protobuf.ByteString
        getLicenseBytes() {
      java.lang.Object ref = license_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        license_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EXPERIMENT_DURATION_FIELD_NUMBER = 4;
    private double experimentDuration_;
    /**
     * <code>optional double experiment_duration = 4;</code>
     *
     * <pre>
     * Experiment duration
     * </pre>
     */
    public boolean hasExperimentDuration() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional double experiment_duration = 4;</code>
     *
     * <pre>
     * Experiment duration
     * </pre>
     */
    public double getExperimentDuration() {
      return experimentDuration_;
    }

    public static final int EXPERIMENT_DESCRIPTION_FIELD_NUMBER = 5;
    private java.lang.Object experimentDescription_;
    /**
     * <code>optional string experiment_description = 5;</code>
     *
     * <pre>
     * Description of a data collection procedure
     * </pre>
     */
    public boolean hasExperimentDescription() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string experiment_description = 5;</code>
     *
     * <pre>
     * Description of a data collection procedure
     * </pre>
     */
    public java.lang.String getExperimentDescription() {
      java.lang.Object ref = experimentDescription_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          experimentDescription_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string experiment_description = 5;</code>
     *
     * <pre>
     * Description of a data collection procedure
     * </pre>
     */
    public com.google.protobuf.ByteString
        getExperimentDescriptionBytes() {
      java.lang.Object ref = experimentDescription_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        experimentDescription_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ENVIRONMENT_DESCRIPTION_FIELD_NUMBER = 6;
    private java.lang.Object environmentDescription_;
    /**
     * <code>optional string environment_description = 6;</code>
     *
     * <pre>
     * Environment description
     * </pre>
     */
    public boolean hasEnvironmentDescription() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional string environment_description = 6;</code>
     *
     * <pre>
     * Environment description
     * </pre>
     */
    public java.lang.String getEnvironmentDescription() {
      java.lang.Object ref = environmentDescription_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          environmentDescription_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string environment_description = 6;</code>
     *
     * <pre>
     * Environment description
     * </pre>
     */
    public com.google.protobuf.ByteString
        getEnvironmentDescriptionBytes() {
      java.lang.Object ref = environmentDescription_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        environmentDescription_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INTERFERENCE_DESCRIPTION_FIELD_NUMBER = 7;
    private java.lang.Object interferenceDescription_;
    /**
     * <code>optional string interference_description = 7;</code>
     *
     * <pre>
     * Interference description ??? DO WE NEED THIS?  
     * </pre>
     */
    public boolean hasInterferenceDescription() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional string interference_description = 7;</code>
     *
     * <pre>
     * Interference description ??? DO WE NEED THIS?  
     * </pre>
     */
    public java.lang.String getInterferenceDescription() {
      java.lang.Object ref = interferenceDescription_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          interferenceDescription_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string interference_description = 7;</code>
     *
     * <pre>
     * Interference description ??? DO WE NEED THIS?  
     * </pre>
     */
    public com.google.protobuf.ByteString
        getInterferenceDescriptionBytes() {
      java.lang.Object ref = interferenceDescription_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        interferenceDescription_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ADDITIONAL_INFO_FIELD_NUMBER = 8;
    private java.lang.Object additionalInfo_;
    /**
     * <code>optional string additional_info = 8;</code>
     *
     * <pre>
     * Additional information      
     * </pre>
     */
    public boolean hasAdditionalInfo() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional string additional_info = 8;</code>
     *
     * <pre>
     * Additional information      
     * </pre>
     */
    public java.lang.String getAdditionalInfo() {
      java.lang.Object ref = additionalInfo_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          additionalInfo_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string additional_info = 8;</code>
     *
     * <pre>
     * Additional information      
     * </pre>
     */
    public com.google.protobuf.ByteString
        getAdditionalInfoBytes() {
      java.lang.Object ref = additionalInfo_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        additionalInfo_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DEVICE_FIELD_NUMBER = 9;
    private gov.nist.perfloc.MetaData.Metadata.DeviceDescription device_;
    /**
     * <code>optional .perfloc.Metadata.DeviceDescription device = 9;</code>
     *
     * <pre>
     * Description of a experimentation scenario
     * </pre>
     */
    public boolean hasDevice() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .perfloc.Metadata.DeviceDescription device = 9;</code>
     *
     * <pre>
     * Description of a experimentation scenario
     * </pre>
     */
    public gov.nist.perfloc.MetaData.Metadata.DeviceDescription getDevice() {
      return device_;
    }
    /**
     * <code>optional .perfloc.Metadata.DeviceDescription device = 9;</code>
     *
     * <pre>
     * Description of a experimentation scenario
     * </pre>
     */
    public gov.nist.perfloc.MetaData.Metadata.DeviceDescriptionOrBuilder getDeviceOrBuilder() {
      return device_;
    }

    public static final int SENSOR_FIELD_NUMBER = 10;
    private java.util.List<gov.nist.perfloc.MetaData.Metadata.Sensor> sensor_;
    /**
     * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
     *
     * <pre>
     * Description of each sensor used for generating sensor readings 
     * </pre>
     */
    public java.util.List<gov.nist.perfloc.MetaData.Metadata.Sensor> getSensorList() {
      return sensor_;
    }
    /**
     * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
     *
     * <pre>
     * Description of each sensor used for generating sensor readings 
     * </pre>
     */
    public java.util.List<? extends gov.nist.perfloc.MetaData.Metadata.SensorOrBuilder> 
        getSensorOrBuilderList() {
      return sensor_;
    }
    /**
     * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
     *
     * <pre>
     * Description of each sensor used for generating sensor readings 
     * </pre>
     */
    public int getSensorCount() {
      return sensor_.size();
    }
    /**
     * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
     *
     * <pre>
     * Description of each sensor used for generating sensor readings 
     * </pre>
     */
    public gov.nist.perfloc.MetaData.Metadata.Sensor getSensor(int index) {
      return sensor_.get(index);
    }
    /**
     * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
     *
     * <pre>
     * Description of each sensor used for generating sensor readings 
     * </pre>
     */
    public gov.nist.perfloc.MetaData.Metadata.SensorOrBuilder getSensorOrBuilder(
        int index) {
      return sensor_.get(index);
    }

    private void initFields() {
      measurementId_ = 0;
      timeCreated_ = 0L;
      license_ = "";
      experimentDuration_ = 0D;
      experimentDescription_ = "";
      environmentDescription_ = "";
      interferenceDescription_ = "";
      additionalInfo_ = "";
      device_ = gov.nist.perfloc.MetaData.Metadata.DeviceDescription.getDefaultInstance();
      sensor_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, measurementId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, timeCreated_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getLicenseBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, experimentDuration_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, getExperimentDescriptionBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(6, getEnvironmentDescriptionBytes());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBytes(7, getInterferenceDescriptionBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBytes(8, getAdditionalInfoBytes());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, device_);
      }
      for (int i = 0; i < sensor_.size(); i++) {
        output.writeMessage(10, sensor_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, measurementId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, timeCreated_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getLicenseBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, experimentDuration_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getExperimentDescriptionBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, getEnvironmentDescriptionBytes());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, getInterferenceDescriptionBytes());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, getAdditionalInfoBytes());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, device_);
      }
      for (int i = 0; i < sensor_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, sensor_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static gov.nist.perfloc.MetaData.Metadata parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gov.nist.perfloc.MetaData.Metadata parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gov.nist.perfloc.MetaData.Metadata parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gov.nist.perfloc.MetaData.Metadata parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gov.nist.perfloc.MetaData.Metadata parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gov.nist.perfloc.MetaData.Metadata parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static gov.nist.perfloc.MetaData.Metadata parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static gov.nist.perfloc.MetaData.Metadata parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static gov.nist.perfloc.MetaData.Metadata parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gov.nist.perfloc.MetaData.Metadata parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(gov.nist.perfloc.MetaData.Metadata prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code perfloc.Metadata}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:perfloc.Metadata)
        gov.nist.perfloc.MetaData.MetadataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gov.nist.perfloc.MetaData.internal_static_perfloc_Metadata_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gov.nist.perfloc.MetaData.internal_static_perfloc_Metadata_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gov.nist.perfloc.MetaData.Metadata.class, gov.nist.perfloc.MetaData.Metadata.Builder.class);
      }

      // Construct using gov.nist.perfloc.MetaData.Metadata.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getDeviceFieldBuilder();
          getSensorFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        measurementId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        timeCreated_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        license_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        experimentDuration_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        experimentDescription_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        environmentDescription_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        interferenceDescription_ = "";
        bitField0_ = (bitField0_ & ~0x00000040);
        additionalInfo_ = "";
        bitField0_ = (bitField0_ & ~0x00000080);
        if (deviceBuilder_ == null) {
          device_ = gov.nist.perfloc.MetaData.Metadata.DeviceDescription.getDefaultInstance();
        } else {
          deviceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        if (sensorBuilder_ == null) {
          sensor_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          sensorBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gov.nist.perfloc.MetaData.internal_static_perfloc_Metadata_descriptor;
      }

      public gov.nist.perfloc.MetaData.Metadata getDefaultInstanceForType() {
        return gov.nist.perfloc.MetaData.Metadata.getDefaultInstance();
      }

      public gov.nist.perfloc.MetaData.Metadata build() {
        gov.nist.perfloc.MetaData.Metadata result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gov.nist.perfloc.MetaData.Metadata buildPartial() {
        gov.nist.perfloc.MetaData.Metadata result = new gov.nist.perfloc.MetaData.Metadata(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.measurementId_ = measurementId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.timeCreated_ = timeCreated_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.license_ = license_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.experimentDuration_ = experimentDuration_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.experimentDescription_ = experimentDescription_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.environmentDescription_ = environmentDescription_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.interferenceDescription_ = interferenceDescription_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.additionalInfo_ = additionalInfo_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        if (deviceBuilder_ == null) {
          result.device_ = device_;
        } else {
          result.device_ = deviceBuilder_.build();
        }
        if (sensorBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            sensor_ = java.util.Collections.unmodifiableList(sensor_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.sensor_ = sensor_;
        } else {
          result.sensor_ = sensorBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gov.nist.perfloc.MetaData.Metadata) {
          return mergeFrom((gov.nist.perfloc.MetaData.Metadata)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gov.nist.perfloc.MetaData.Metadata other) {
        if (other == gov.nist.perfloc.MetaData.Metadata.getDefaultInstance()) return this;
        if (other.hasMeasurementId()) {
          setMeasurementId(other.getMeasurementId());
        }
        if (other.hasTimeCreated()) {
          setTimeCreated(other.getTimeCreated());
        }
        if (other.hasLicense()) {
          bitField0_ |= 0x00000004;
          license_ = other.license_;
          onChanged();
        }
        if (other.hasExperimentDuration()) {
          setExperimentDuration(other.getExperimentDuration());
        }
        if (other.hasExperimentDescription()) {
          bitField0_ |= 0x00000010;
          experimentDescription_ = other.experimentDescription_;
          onChanged();
        }
        if (other.hasEnvironmentDescription()) {
          bitField0_ |= 0x00000020;
          environmentDescription_ = other.environmentDescription_;
          onChanged();
        }
        if (other.hasInterferenceDescription()) {
          bitField0_ |= 0x00000040;
          interferenceDescription_ = other.interferenceDescription_;
          onChanged();
        }
        if (other.hasAdditionalInfo()) {
          bitField0_ |= 0x00000080;
          additionalInfo_ = other.additionalInfo_;
          onChanged();
        }
        if (other.hasDevice()) {
          mergeDevice(other.getDevice());
        }
        if (sensorBuilder_ == null) {
          if (!other.sensor_.isEmpty()) {
            if (sensor_.isEmpty()) {
              sensor_ = other.sensor_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureSensorIsMutable();
              sensor_.addAll(other.sensor_);
            }
            onChanged();
          }
        } else {
          if (!other.sensor_.isEmpty()) {
            if (sensorBuilder_.isEmpty()) {
              sensorBuilder_.dispose();
              sensorBuilder_ = null;
              sensor_ = other.sensor_;
              bitField0_ = (bitField0_ & ~0x00000200);
              sensorBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSensorFieldBuilder() : null;
            } else {
              sensorBuilder_.addAllMessages(other.sensor_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gov.nist.perfloc.MetaData.Metadata parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gov.nist.perfloc.MetaData.Metadata) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int measurementId_ ;
      /**
       * <code>optional int32 measurement_id = 1;</code>
       *
       * <pre>
       * Identifier of the metadata
       * </pre>
       */
      public boolean hasMeasurementId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 measurement_id = 1;</code>
       *
       * <pre>
       * Identifier of the metadata
       * </pre>
       */
      public int getMeasurementId() {
        return measurementId_;
      }
      /**
       * <code>optional int32 measurement_id = 1;</code>
       *
       * <pre>
       * Identifier of the metadata
       * </pre>
       */
      public Builder setMeasurementId(int value) {
        bitField0_ |= 0x00000001;
        measurementId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 measurement_id = 1;</code>
       *
       * <pre>
       * Identifier of the metadata
       * </pre>
       */
      public Builder clearMeasurementId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        measurementId_ = 0;
        onChanged();
        return this;
      }

      private long timeCreated_ ;
      /**
       * <code>optional int64 time_created = 2;</code>
       *
       * <pre>
       * Creation date - milliseconds from 1.1.1970
       * </pre>
       */
      public boolean hasTimeCreated() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 time_created = 2;</code>
       *
       * <pre>
       * Creation date - milliseconds from 1.1.1970
       * </pre>
       */
      public long getTimeCreated() {
        return timeCreated_;
      }
      /**
       * <code>optional int64 time_created = 2;</code>
       *
       * <pre>
       * Creation date - milliseconds from 1.1.1970
       * </pre>
       */
      public Builder setTimeCreated(long value) {
        bitField0_ |= 0x00000002;
        timeCreated_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 time_created = 2;</code>
       *
       * <pre>
       * Creation date - milliseconds from 1.1.1970
       * </pre>
       */
      public Builder clearTimeCreated() {
        bitField0_ = (bitField0_ & ~0x00000002);
        timeCreated_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object license_ = "";
      /**
       * <code>optional string license = 3;</code>
       *
       * <pre>
       * License type
       * </pre>
       */
      public boolean hasLicense() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string license = 3;</code>
       *
       * <pre>
       * License type
       * </pre>
       */
      public java.lang.String getLicense() {
        java.lang.Object ref = license_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            license_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string license = 3;</code>
       *
       * <pre>
       * License type
       * </pre>
       */
      public com.google.protobuf.ByteString
          getLicenseBytes() {
        java.lang.Object ref = license_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          license_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string license = 3;</code>
       *
       * <pre>
       * License type
       * </pre>
       */
      public Builder setLicense(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        license_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string license = 3;</code>
       *
       * <pre>
       * License type
       * </pre>
       */
      public Builder clearLicense() {
        bitField0_ = (bitField0_ & ~0x00000004);
        license_ = getDefaultInstance().getLicense();
        onChanged();
        return this;
      }
      /**
       * <code>optional string license = 3;</code>
       *
       * <pre>
       * License type
       * </pre>
       */
      public Builder setLicenseBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        license_ = value;
        onChanged();
        return this;
      }

      private double experimentDuration_ ;
      /**
       * <code>optional double experiment_duration = 4;</code>
       *
       * <pre>
       * Experiment duration
       * </pre>
       */
      public boolean hasExperimentDuration() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double experiment_duration = 4;</code>
       *
       * <pre>
       * Experiment duration
       * </pre>
       */
      public double getExperimentDuration() {
        return experimentDuration_;
      }
      /**
       * <code>optional double experiment_duration = 4;</code>
       *
       * <pre>
       * Experiment duration
       * </pre>
       */
      public Builder setExperimentDuration(double value) {
        bitField0_ |= 0x00000008;
        experimentDuration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double experiment_duration = 4;</code>
       *
       * <pre>
       * Experiment duration
       * </pre>
       */
      public Builder clearExperimentDuration() {
        bitField0_ = (bitField0_ & ~0x00000008);
        experimentDuration_ = 0D;
        onChanged();
        return this;
      }

      private java.lang.Object experimentDescription_ = "";
      /**
       * <code>optional string experiment_description = 5;</code>
       *
       * <pre>
       * Description of a data collection procedure
       * </pre>
       */
      public boolean hasExperimentDescription() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string experiment_description = 5;</code>
       *
       * <pre>
       * Description of a data collection procedure
       * </pre>
       */
      public java.lang.String getExperimentDescription() {
        java.lang.Object ref = experimentDescription_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            experimentDescription_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string experiment_description = 5;</code>
       *
       * <pre>
       * Description of a data collection procedure
       * </pre>
       */
      public com.google.protobuf.ByteString
          getExperimentDescriptionBytes() {
        java.lang.Object ref = experimentDescription_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          experimentDescription_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string experiment_description = 5;</code>
       *
       * <pre>
       * Description of a data collection procedure
       * </pre>
       */
      public Builder setExperimentDescription(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        experimentDescription_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string experiment_description = 5;</code>
       *
       * <pre>
       * Description of a data collection procedure
       * </pre>
       */
      public Builder clearExperimentDescription() {
        bitField0_ = (bitField0_ & ~0x00000010);
        experimentDescription_ = getDefaultInstance().getExperimentDescription();
        onChanged();
        return this;
      }
      /**
       * <code>optional string experiment_description = 5;</code>
       *
       * <pre>
       * Description of a data collection procedure
       * </pre>
       */
      public Builder setExperimentDescriptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        experimentDescription_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object environmentDescription_ = "";
      /**
       * <code>optional string environment_description = 6;</code>
       *
       * <pre>
       * Environment description
       * </pre>
       */
      public boolean hasEnvironmentDescription() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional string environment_description = 6;</code>
       *
       * <pre>
       * Environment description
       * </pre>
       */
      public java.lang.String getEnvironmentDescription() {
        java.lang.Object ref = environmentDescription_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            environmentDescription_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string environment_description = 6;</code>
       *
       * <pre>
       * Environment description
       * </pre>
       */
      public com.google.protobuf.ByteString
          getEnvironmentDescriptionBytes() {
        java.lang.Object ref = environmentDescription_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          environmentDescription_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string environment_description = 6;</code>
       *
       * <pre>
       * Environment description
       * </pre>
       */
      public Builder setEnvironmentDescription(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        environmentDescription_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string environment_description = 6;</code>
       *
       * <pre>
       * Environment description
       * </pre>
       */
      public Builder clearEnvironmentDescription() {
        bitField0_ = (bitField0_ & ~0x00000020);
        environmentDescription_ = getDefaultInstance().getEnvironmentDescription();
        onChanged();
        return this;
      }
      /**
       * <code>optional string environment_description = 6;</code>
       *
       * <pre>
       * Environment description
       * </pre>
       */
      public Builder setEnvironmentDescriptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        environmentDescription_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object interferenceDescription_ = "";
      /**
       * <code>optional string interference_description = 7;</code>
       *
       * <pre>
       * Interference description ??? DO WE NEED THIS?  
       * </pre>
       */
      public boolean hasInterferenceDescription() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional string interference_description = 7;</code>
       *
       * <pre>
       * Interference description ??? DO WE NEED THIS?  
       * </pre>
       */
      public java.lang.String getInterferenceDescription() {
        java.lang.Object ref = interferenceDescription_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            interferenceDescription_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string interference_description = 7;</code>
       *
       * <pre>
       * Interference description ??? DO WE NEED THIS?  
       * </pre>
       */
      public com.google.protobuf.ByteString
          getInterferenceDescriptionBytes() {
        java.lang.Object ref = interferenceDescription_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          interferenceDescription_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string interference_description = 7;</code>
       *
       * <pre>
       * Interference description ??? DO WE NEED THIS?  
       * </pre>
       */
      public Builder setInterferenceDescription(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        interferenceDescription_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string interference_description = 7;</code>
       *
       * <pre>
       * Interference description ??? DO WE NEED THIS?  
       * </pre>
       */
      public Builder clearInterferenceDescription() {
        bitField0_ = (bitField0_ & ~0x00000040);
        interferenceDescription_ = getDefaultInstance().getInterferenceDescription();
        onChanged();
        return this;
      }
      /**
       * <code>optional string interference_description = 7;</code>
       *
       * <pre>
       * Interference description ??? DO WE NEED THIS?  
       * </pre>
       */
      public Builder setInterferenceDescriptionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        interferenceDescription_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object additionalInfo_ = "";
      /**
       * <code>optional string additional_info = 8;</code>
       *
       * <pre>
       * Additional information      
       * </pre>
       */
      public boolean hasAdditionalInfo() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional string additional_info = 8;</code>
       *
       * <pre>
       * Additional information      
       * </pre>
       */
      public java.lang.String getAdditionalInfo() {
        java.lang.Object ref = additionalInfo_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            additionalInfo_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string additional_info = 8;</code>
       *
       * <pre>
       * Additional information      
       * </pre>
       */
      public com.google.protobuf.ByteString
          getAdditionalInfoBytes() {
        java.lang.Object ref = additionalInfo_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          additionalInfo_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string additional_info = 8;</code>
       *
       * <pre>
       * Additional information      
       * </pre>
       */
      public Builder setAdditionalInfo(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        additionalInfo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string additional_info = 8;</code>
       *
       * <pre>
       * Additional information      
       * </pre>
       */
      public Builder clearAdditionalInfo() {
        bitField0_ = (bitField0_ & ~0x00000080);
        additionalInfo_ = getDefaultInstance().getAdditionalInfo();
        onChanged();
        return this;
      }
      /**
       * <code>optional string additional_info = 8;</code>
       *
       * <pre>
       * Additional information      
       * </pre>
       */
      public Builder setAdditionalInfoBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000080;
        additionalInfo_ = value;
        onChanged();
        return this;
      }

      private gov.nist.perfloc.MetaData.Metadata.DeviceDescription device_ = gov.nist.perfloc.MetaData.Metadata.DeviceDescription.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          gov.nist.perfloc.MetaData.Metadata.DeviceDescription, gov.nist.perfloc.MetaData.Metadata.DeviceDescription.Builder, gov.nist.perfloc.MetaData.Metadata.DeviceDescriptionOrBuilder> deviceBuilder_;
      /**
       * <code>optional .perfloc.Metadata.DeviceDescription device = 9;</code>
       *
       * <pre>
       * Description of a experimentation scenario
       * </pre>
       */
      public boolean hasDevice() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .perfloc.Metadata.DeviceDescription device = 9;</code>
       *
       * <pre>
       * Description of a experimentation scenario
       * </pre>
       */
      public gov.nist.perfloc.MetaData.Metadata.DeviceDescription getDevice() {
        if (deviceBuilder_ == null) {
          return device_;
        } else {
          return deviceBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .perfloc.Metadata.DeviceDescription device = 9;</code>
       *
       * <pre>
       * Description of a experimentation scenario
       * </pre>
       */
      public Builder setDevice(gov.nist.perfloc.MetaData.Metadata.DeviceDescription value) {
        if (deviceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          device_ = value;
          onChanged();
        } else {
          deviceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .perfloc.Metadata.DeviceDescription device = 9;</code>
       *
       * <pre>
       * Description of a experimentation scenario
       * </pre>
       */
      public Builder setDevice(
          gov.nist.perfloc.MetaData.Metadata.DeviceDescription.Builder builderForValue) {
        if (deviceBuilder_ == null) {
          device_ = builderForValue.build();
          onChanged();
        } else {
          deviceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .perfloc.Metadata.DeviceDescription device = 9;</code>
       *
       * <pre>
       * Description of a experimentation scenario
       * </pre>
       */
      public Builder mergeDevice(gov.nist.perfloc.MetaData.Metadata.DeviceDescription value) {
        if (deviceBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              device_ != gov.nist.perfloc.MetaData.Metadata.DeviceDescription.getDefaultInstance()) {
            device_ =
              gov.nist.perfloc.MetaData.Metadata.DeviceDescription.newBuilder(device_).mergeFrom(value).buildPartial();
          } else {
            device_ = value;
          }
          onChanged();
        } else {
          deviceBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .perfloc.Metadata.DeviceDescription device = 9;</code>
       *
       * <pre>
       * Description of a experimentation scenario
       * </pre>
       */
      public Builder clearDevice() {
        if (deviceBuilder_ == null) {
          device_ = gov.nist.perfloc.MetaData.Metadata.DeviceDescription.getDefaultInstance();
          onChanged();
        } else {
          deviceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .perfloc.Metadata.DeviceDescription device = 9;</code>
       *
       * <pre>
       * Description of a experimentation scenario
       * </pre>
       */
      public gov.nist.perfloc.MetaData.Metadata.DeviceDescription.Builder getDeviceBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getDeviceFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .perfloc.Metadata.DeviceDescription device = 9;</code>
       *
       * <pre>
       * Description of a experimentation scenario
       * </pre>
       */
      public gov.nist.perfloc.MetaData.Metadata.DeviceDescriptionOrBuilder getDeviceOrBuilder() {
        if (deviceBuilder_ != null) {
          return deviceBuilder_.getMessageOrBuilder();
        } else {
          return device_;
        }
      }
      /**
       * <code>optional .perfloc.Metadata.DeviceDescription device = 9;</code>
       *
       * <pre>
       * Description of a experimentation scenario
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          gov.nist.perfloc.MetaData.Metadata.DeviceDescription, gov.nist.perfloc.MetaData.Metadata.DeviceDescription.Builder, gov.nist.perfloc.MetaData.Metadata.DeviceDescriptionOrBuilder> 
          getDeviceFieldBuilder() {
        if (deviceBuilder_ == null) {
          deviceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              gov.nist.perfloc.MetaData.Metadata.DeviceDescription, gov.nist.perfloc.MetaData.Metadata.DeviceDescription.Builder, gov.nist.perfloc.MetaData.Metadata.DeviceDescriptionOrBuilder>(
                  getDevice(),
                  getParentForChildren(),
                  isClean());
          device_ = null;
        }
        return deviceBuilder_;
      }

      private java.util.List<gov.nist.perfloc.MetaData.Metadata.Sensor> sensor_ =
        java.util.Collections.emptyList();
      private void ensureSensorIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          sensor_ = new java.util.ArrayList<gov.nist.perfloc.MetaData.Metadata.Sensor>(sensor_);
          bitField0_ |= 0x00000200;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          gov.nist.perfloc.MetaData.Metadata.Sensor, gov.nist.perfloc.MetaData.Metadata.Sensor.Builder, gov.nist.perfloc.MetaData.Metadata.SensorOrBuilder> sensorBuilder_;

      /**
       * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
       *
       * <pre>
       * Description of each sensor used for generating sensor readings 
       * </pre>
       */
      public java.util.List<gov.nist.perfloc.MetaData.Metadata.Sensor> getSensorList() {
        if (sensorBuilder_ == null) {
          return java.util.Collections.unmodifiableList(sensor_);
        } else {
          return sensorBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
       *
       * <pre>
       * Description of each sensor used for generating sensor readings 
       * </pre>
       */
      public int getSensorCount() {
        if (sensorBuilder_ == null) {
          return sensor_.size();
        } else {
          return sensorBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
       *
       * <pre>
       * Description of each sensor used for generating sensor readings 
       * </pre>
       */
      public gov.nist.perfloc.MetaData.Metadata.Sensor getSensor(int index) {
        if (sensorBuilder_ == null) {
          return sensor_.get(index);
        } else {
          return sensorBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
       *
       * <pre>
       * Description of each sensor used for generating sensor readings 
       * </pre>
       */
      public Builder setSensor(
          int index, gov.nist.perfloc.MetaData.Metadata.Sensor value) {
        if (sensorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSensorIsMutable();
          sensor_.set(index, value);
          onChanged();
        } else {
          sensorBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
       *
       * <pre>
       * Description of each sensor used for generating sensor readings 
       * </pre>
       */
      public Builder setSensor(
          int index, gov.nist.perfloc.MetaData.Metadata.Sensor.Builder builderForValue) {
        if (sensorBuilder_ == null) {
          ensureSensorIsMutable();
          sensor_.set(index, builderForValue.build());
          onChanged();
        } else {
          sensorBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
       *
       * <pre>
       * Description of each sensor used for generating sensor readings 
       * </pre>
       */
      public Builder addSensor(gov.nist.perfloc.MetaData.Metadata.Sensor value) {
        if (sensorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSensorIsMutable();
          sensor_.add(value);
          onChanged();
        } else {
          sensorBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
       *
       * <pre>
       * Description of each sensor used for generating sensor readings 
       * </pre>
       */
      public Builder addSensor(
          int index, gov.nist.perfloc.MetaData.Metadata.Sensor value) {
        if (sensorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSensorIsMutable();
          sensor_.add(index, value);
          onChanged();
        } else {
          sensorBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
       *
       * <pre>
       * Description of each sensor used for generating sensor readings 
       * </pre>
       */
      public Builder addSensor(
          gov.nist.perfloc.MetaData.Metadata.Sensor.Builder builderForValue) {
        if (sensorBuilder_ == null) {
          ensureSensorIsMutable();
          sensor_.add(builderForValue.build());
          onChanged();
        } else {
          sensorBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
       *
       * <pre>
       * Description of each sensor used for generating sensor readings 
       * </pre>
       */
      public Builder addSensor(
          int index, gov.nist.perfloc.MetaData.Metadata.Sensor.Builder builderForValue) {
        if (sensorBuilder_ == null) {
          ensureSensorIsMutable();
          sensor_.add(index, builderForValue.build());
          onChanged();
        } else {
          sensorBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
       *
       * <pre>
       * Description of each sensor used for generating sensor readings 
       * </pre>
       */
      public Builder addAllSensor(
          java.lang.Iterable<? extends gov.nist.perfloc.MetaData.Metadata.Sensor> values) {
        if (sensorBuilder_ == null) {
          ensureSensorIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, sensor_);
          onChanged();
        } else {
          sensorBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
       *
       * <pre>
       * Description of each sensor used for generating sensor readings 
       * </pre>
       */
      public Builder clearSensor() {
        if (sensorBuilder_ == null) {
          sensor_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
        } else {
          sensorBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
       *
       * <pre>
       * Description of each sensor used for generating sensor readings 
       * </pre>
       */
      public Builder removeSensor(int index) {
        if (sensorBuilder_ == null) {
          ensureSensorIsMutable();
          sensor_.remove(index);
          onChanged();
        } else {
          sensorBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
       *
       * <pre>
       * Description of each sensor used for generating sensor readings 
       * </pre>
       */
      public gov.nist.perfloc.MetaData.Metadata.Sensor.Builder getSensorBuilder(
          int index) {
        return getSensorFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
       *
       * <pre>
       * Description of each sensor used for generating sensor readings 
       * </pre>
       */
      public gov.nist.perfloc.MetaData.Metadata.SensorOrBuilder getSensorOrBuilder(
          int index) {
        if (sensorBuilder_ == null) {
          return sensor_.get(index);  } else {
          return sensorBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
       *
       * <pre>
       * Description of each sensor used for generating sensor readings 
       * </pre>
       */
      public java.util.List<? extends gov.nist.perfloc.MetaData.Metadata.SensorOrBuilder> 
           getSensorOrBuilderList() {
        if (sensorBuilder_ != null) {
          return sensorBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(sensor_);
        }
      }
      /**
       * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
       *
       * <pre>
       * Description of each sensor used for generating sensor readings 
       * </pre>
       */
      public gov.nist.perfloc.MetaData.Metadata.Sensor.Builder addSensorBuilder() {
        return getSensorFieldBuilder().addBuilder(
            gov.nist.perfloc.MetaData.Metadata.Sensor.getDefaultInstance());
      }
      /**
       * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
       *
       * <pre>
       * Description of each sensor used for generating sensor readings 
       * </pre>
       */
      public gov.nist.perfloc.MetaData.Metadata.Sensor.Builder addSensorBuilder(
          int index) {
        return getSensorFieldBuilder().addBuilder(
            index, gov.nist.perfloc.MetaData.Metadata.Sensor.getDefaultInstance());
      }
      /**
       * <code>repeated .perfloc.Metadata.Sensor sensor = 10;</code>
       *
       * <pre>
       * Description of each sensor used for generating sensor readings 
       * </pre>
       */
      public java.util.List<gov.nist.perfloc.MetaData.Metadata.Sensor.Builder> 
           getSensorBuilderList() {
        return getSensorFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          gov.nist.perfloc.MetaData.Metadata.Sensor, gov.nist.perfloc.MetaData.Metadata.Sensor.Builder, gov.nist.perfloc.MetaData.Metadata.SensorOrBuilder> 
          getSensorFieldBuilder() {
        if (sensorBuilder_ == null) {
          sensorBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              gov.nist.perfloc.MetaData.Metadata.Sensor, gov.nist.perfloc.MetaData.Metadata.Sensor.Builder, gov.nist.perfloc.MetaData.Metadata.SensorOrBuilder>(
                  sensor_,
                  ((bitField0_ & 0x00000200) == 0x00000200),
                  getParentForChildren(),
                  isClean());
          sensor_ = null;
        }
        return sensorBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:perfloc.Metadata)
    }

    static {
      defaultInstance = new Metadata(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:perfloc.Metadata)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfloc_Metadata_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfloc_Metadata_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfloc_Metadata_DeviceDescription_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfloc_Metadata_DeviceDescription_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_perfloc_Metadata_Sensor_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_perfloc_Metadata_Sensor_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017meta_data.proto\022\007perfloc\"\303\006\n\010Metadata\022" +
      "\026\n\016measurement_id\030\001 \001(\005\022\024\n\014time_created\030" +
      "\002 \001(\003\022\017\n\007license\030\003 \001(\t\022\033\n\023experiment_dur" +
      "ation\030\004 \001(\001\022\036\n\026experiment_description\030\005 " +
      "\001(\t\022\037\n\027environment_description\030\006 \001(\t\022 \n\030" +
      "interference_description\030\007 \001(\t\022\027\n\017additi" +
      "onal_info\030\010 \001(\t\0223\n\006device\030\t \001(\0132#.perflo" +
      "c.Metadata.DeviceDescription\022(\n\006sensor\030\n" +
      " \003(\0132\030.perfloc.Metadata.Sensor\032\342\001\n\021Devic" +
      "eDescription\022\r\n\005board\030\001 \001(\t\022\r\n\005brand\030\002 \001",
      "(\t\022\016\n\006device\030\003 \001(\t\022\017\n\007display\030\004 \001(\t\022\023\n\013f" +
      "ingerprint\030\005 \001(\t\022\020\n\010hardware\030\006 \001(\t\022\n\n\002id" +
      "\030\007 \001(\t\022\024\n\014manufacturer\030\010 \001(\t\022\r\n\005model\030\t " +
      "\001(\t\022\017\n\007product\030\n \001(\t\022\016\n\006serial\030\013 \001(\t\022\025\n\r" +
      "radio_version\030\014 \001(\t\032\232\002\n\006Sensor\022\014\n\004type\030\001" +
      " \001(\005\022\023\n\013string_type\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022" +
      "\030\n\020is_wakeup_sensor\030\004 \001(\010\022\016\n\006vendor\030\005 \001(" +
      "\t\022\017\n\007version\030\006 \001(\005\022\022\n\nresolution\030\007 \001(\002\022\026" +
      "\n\016reporting_mode\030\010 \001(\005\022\r\n\005power\030\t \001(\002\022\034\n" +
      "\024fifo_max_event_count\030\n \001(\005\022!\n\031fifo_rese",
      "rved_event_count\030\013 \001(\005\022\025\n\rmaximum_range\030" +
      "\014 \001(\002\022\021\n\tmin_delay\030\r \001(\002B\022\n\020gov.nist.per" +
      "floc"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_perfloc_Metadata_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_perfloc_Metadata_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfloc_Metadata_descriptor,
        new java.lang.String[] { "MeasurementId", "TimeCreated", "License", "ExperimentDuration", "ExperimentDescription", "EnvironmentDescription", "InterferenceDescription", "AdditionalInfo", "Device", "Sensor", });
    internal_static_perfloc_Metadata_DeviceDescription_descriptor =
      internal_static_perfloc_Metadata_descriptor.getNestedTypes().get(0);
    internal_static_perfloc_Metadata_DeviceDescription_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfloc_Metadata_DeviceDescription_descriptor,
        new java.lang.String[] { "Board", "Brand", "Device", "Display", "Fingerprint", "Hardware", "Id", "Manufacturer", "Model", "Product", "Serial", "RadioVersion", });
    internal_static_perfloc_Metadata_Sensor_descriptor =
      internal_static_perfloc_Metadata_descriptor.getNestedTypes().get(1);
    internal_static_perfloc_Metadata_Sensor_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_perfloc_Metadata_Sensor_descriptor,
        new java.lang.String[] { "Type", "StringType", "Name", "IsWakeupSensor", "Vendor", "Version", "Resolution", "ReportingMode", "Power", "FifoMaxEventCount", "FifoReservedEventCount", "MaximumRange", "MinDelay", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
